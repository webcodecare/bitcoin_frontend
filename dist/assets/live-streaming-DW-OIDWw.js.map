{"version":3,"file":"live-streaming-DW-OIDWw.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/wifi-off.js","../../../node_modules/lucide-react/dist/esm/icons/wifi.js","../../src/services/priceStreamingService.ts","../../src/hooks/usePriceStreaming.ts","../../src/components/widgets/LivePriceWidget.tsx","../../src/components/streaming/ConnectionStatus.tsx","../../src/components/streaming/StreamingMetrics.tsx","../../src/pages/live-streaming.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst WifiOff = createLucideIcon(\"WifiOff\", [\n  [\"path\", { d: \"M12 20h.01\", key: \"zekei9\" }],\n  [\"path\", { d: \"M8.5 16.429a5 5 0 0 1 7 0\", key: \"1bycff\" }],\n  [\"path\", { d: \"M5 12.859a10 10 0 0 1 5.17-2.69\", key: \"1dl1wf\" }],\n  [\"path\", { d: \"M19 12.859a10 10 0 0 0-2.007-1.523\", key: \"4k23kn\" }],\n  [\"path\", { d: \"M2 8.82a15 15 0 0 1 4.177-2.643\", key: \"1grhjp\" }],\n  [\"path\", { d: \"M22 8.82a15 15 0 0 0-11.288-3.764\", key: \"z3jwby\" }],\n  [\"path\", { d: \"m2 2 20 20\", key: \"1ooewy\" }]\n]);\n\nexport { WifiOff as default };\n//# sourceMappingURL=wifi-off.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Wifi = createLucideIcon(\"Wifi\", [\n  [\"path\", { d: \"M12 20h.01\", key: \"zekei9\" }],\n  [\"path\", { d: \"M2 8.82a15 15 0 0 1 20 0\", key: \"dnpr2z\" }],\n  [\"path\", { d: \"M5 12.859a10 10 0 0 1 14 0\", key: \"1x1e6c\" }],\n  [\"path\", { d: \"M8.5 16.429a5 5 0 0 1 7 0\", key: \"1bycff\" }]\n]);\n\nexport { Wifi as default };\n//# sourceMappingURL=wifi.js.map\n","// Browser-compatible EventEmitter implementation\nclass SimpleEventEmitter {\n  private events: { [key: string]: Function[] } = {};\n\n  on(event: string, listener: Function) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n  }\n\n  emit(event: string, ...args: any[]) {\n    if (this.events[event]) {\n      this.events[event].forEach(listener => listener(...args));\n    }\n  }\n\n  removeListener(event: string, listener: Function) {\n    if (this.events[event]) {\n      this.events[event] = this.events[event].filter(l => l !== listener);\n    }\n  }\n}\n\nexport interface PriceData {\n  symbol: string;\n  price: number;\n  change24h: number;\n  changePercent24h: number;\n  volume24h: number;\n  high24h: number;\n  low24h: number;\n  timestamp: number;\n}\n\nexport interface KlineData {\n  symbol: string;\n  openTime: number;\n  closeTime: number;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  interval: string;\n}\n\nclass PriceStreamingService extends SimpleEventEmitter {\n  private binanceWs: WebSocket | null = null;\n  private coinCapEventSource: EventSource | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private isConnected = false;\n  private subscribedSymbols = new Set<string>();\n  private lastPriceUpdate: { [symbol: string]: number } = {};\n  private updateThrottle: { [symbol: string]: number } = {};\n  private throttleDelay = 100; // 100ms throttle for sub-second updates\n\n  constructor() {\n    super();\n    this.setupErrorHandling();\n  }\n\n  private setupErrorHandling() {\n    this.on('error', (error) => {\n      console.error('Price streaming error:', error);\n      this.handleConnectionFailure();\n    });\n  }\n\n  // Primary: Binance WebSocket for Kline Streaming\n  public connectBinanceWebSocket(symbols: string[] = ['btcusdt', 'ethusdt', 'solusdt']) {\n    try {\n      // Disconnect existing connection first\n      if (this.binanceWs) {\n        this.binanceWs.close();\n        this.binanceWs = null;\n      }\n\n      this.subscribedSymbols = new Set(symbols.map(s => s.toLowerCase()));\n      \n      // Use combined streams endpoint for multiple symbols\n      const streams = Array.from(this.subscribedSymbols).flatMap(symbol => [\n        `${symbol}@ticker`,\n        `${symbol}@kline_1m`\n      ]);\n      \n      const wsUrl = `wss://stream.binance.com:9443/stream?streams=${streams.join('/')}`;\n      console.log('Connecting to Binance WebSocket:', wsUrl);\n      \n      this.binanceWs = new WebSocket(wsUrl);\n      \n      this.binanceWs.onopen = () => {\n        console.log('WebSocket connected to Binance');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.emit('connected', { source: 'binance', isConnected: true });\n      };\n\n      this.binanceWs.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleBinanceMessage(data);\n        } catch (error) {\n          console.error('Error parsing Binance message:', error);\n        }\n      };\n\n      this.binanceWs.onclose = () => {\n        console.log('Binance WebSocket disconnected');\n        this.isConnected = false;\n        this.emit('disconnected', { source: 'binance', isConnected: false });\n        this.handleConnectionFailure();\n      };\n\n      this.binanceWs.onerror = (error) => {\n        console.error('Binance WebSocket error:', error);\n        this.emit('error', { source: 'binance', error });\n      };\n\n    } catch (error) {\n      console.error('Failed to connect to Binance WebSocket:', error);\n      this.handleConnectionFailure();\n    }\n  }\n\n  private handleBinanceMessage(data: any) {\n    if (data.stream && data.data) {\n      const streamType = data.stream.split('@')[1];\n      \n      if (streamType === 'kline_1m') {\n        this.handleKlineData(data.data);\n      } else if (streamType === 'ticker') {\n        this.handleTickerData(data.data);\n      }\n    }\n  }\n\n  private handleKlineData(klineData: any) {\n    const kline = klineData.k;\n    if (!kline.x) return; // Only process closed klines\n    \n    const data: KlineData = {\n      symbol: kline.s.toUpperCase(),\n      openTime: kline.t,\n      closeTime: kline.T,\n      open: parseFloat(kline.o),\n      high: parseFloat(kline.h),\n      low: parseFloat(kline.l),\n      close: parseFloat(kline.c),\n      volume: parseFloat(kline.v),\n      interval: '1m'\n    };\n\n    this.throttledEmit('kline', data);\n  }\n\n  private handleTickerData(tickerData: any) {\n    const priceData: PriceData = {\n      symbol: tickerData.s,\n      price: parseFloat(tickerData.c),\n      change24h: parseFloat(tickerData.P),\n      changePercent24h: parseFloat(tickerData.P),\n      volume24h: parseFloat(tickerData.v),\n      high24h: parseFloat(tickerData.h),\n      low24h: parseFloat(tickerData.l),\n      timestamp: Date.now()\n    };\n\n    this.throttledEmit('price', priceData);\n  }\n\n  // Fallback: Server-Sent Events using CoinCap API\n  public connectCoinCapSSE() {\n    try {\n      console.log('Connecting to CoinCap SSE fallback...');\n      \n      // Convert symbols to CoinCap format\n      const coinCapSymbols = Array.from(this.subscribedSymbols).map(symbol => {\n        return symbol.replace('usdt', '').toLowerCase();\n      });\n\n      this.coinCapEventSource = new EventSource('/api/stream/coincap');\n      \n      this.coinCapEventSource.onopen = () => {\n        console.log('CoinCap SSE connected');\n        this.isConnected = true;\n        this.emit('connected', { source: 'coincap' });\n      };\n\n      this.coinCapEventSource.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleCoinCapMessage(data);\n        } catch (error) {\n          console.error('Error parsing CoinCap SSE message:', error);\n        }\n      };\n\n      this.coinCapEventSource.onerror = (error) => {\n        console.error('CoinCap SSE error:', error);\n        this.emit('error', { source: 'coincap', error });\n        this.handleConnectionFailure();\n      };\n\n    } catch (error) {\n      console.error('Failed to connect to CoinCap SSE:', error);\n      this.emit('error', { source: 'coincap', error });\n    }\n  }\n\n  private handleCoinCapMessage(data: any) {\n    if (data.type === 'price' && data.data) {\n      const priceData: PriceData = {\n        symbol: `${data.data.id.toUpperCase()}USDT`,\n        price: parseFloat(data.data.priceUsd),\n        change24h: parseFloat(data.data.changePercent24Hr || '0'),\n        changePercent24h: parseFloat(data.data.changePercent24Hr || '0'),\n        volume24h: parseFloat(data.data.volumeUsd24Hr || '0'),\n        high24h: 0, // Not available in CoinCap\n        low24h: 0,  // Not available in CoinCap\n        timestamp: Date.now()\n      };\n\n      this.throttledEmit('price', priceData);\n    }\n  }\n\n  // Throttled update logic for sub-second price feeds\n  private throttledEmit(event: string, data: PriceData | KlineData) {\n    const symbol = data.symbol;\n    const now = Date.now();\n    \n    // Check if we should throttle this update\n    if (this.updateThrottle[symbol] && (now - this.updateThrottle[symbol]) < this.throttleDelay) {\n      return;\n    }\n    \n    this.updateThrottle[symbol] = now;\n    \n    // Check if price has changed significantly for price updates\n    if (event === 'price') {\n      const priceData = data as PriceData;\n      const lastPrice = this.lastPriceUpdate[symbol];\n      \n      if (lastPrice && Math.abs(priceData.price - lastPrice) / lastPrice < 0.0001) {\n        return; // Skip if price change is less than 0.01%\n      }\n      \n      this.lastPriceUpdate[symbol] = priceData.price;\n    }\n    \n    this.emit(event, data);\n  }\n\n  private handleConnectionFailure() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.pow(2, this.reconnectAttempts) * 1000; // Exponential backoff\n      \n      console.log(`Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`);\n      \n      setTimeout(() => {\n        if (!this.isConnected) {\n          // Try fallback if primary connection failed\n          if (this.binanceWs && this.binanceWs.readyState !== WebSocket.OPEN) {\n            console.log('Switching to CoinCap SSE fallback...');\n            this.connectCoinCapSSE();\n          } else {\n            this.connectBinanceWebSocket(Array.from(this.subscribedSymbols));\n          }\n        }\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n    }\n  }\n\n  public subscribe(symbols: string[]) {\n    symbols.forEach(symbol => this.subscribedSymbols.add(symbol.toLowerCase()));\n    \n    if (this.isConnected) {\n      // Send subscription message if connected\n      this.sendSubscription(symbols);\n    }\n  }\n\n  public unsubscribe(symbols: string[]) {\n    symbols.forEach(symbol => this.subscribedSymbols.delete(symbol.toLowerCase()));\n    \n    if (this.isConnected) {\n      // Send unsubscription message if connected\n      this.sendUnsubscription(symbols);\n    }\n  }\n\n  private sendSubscription(symbols: string[]) {\n    if (this.binanceWs && this.binanceWs.readyState === WebSocket.OPEN) {\n      const params = symbols.map(symbol => `${symbol.toLowerCase()}@ticker`);\n      const message = {\n        method: \"SUBSCRIBE\",\n        params: params,\n        id: Date.now()\n      };\n      \n      this.binanceWs.send(JSON.stringify(message));\n    }\n  }\n\n  private sendUnsubscription(symbols: string[]) {\n    if (this.binanceWs && this.binanceWs.readyState === WebSocket.OPEN) {\n      const params = symbols.map(symbol => `${symbol.toLowerCase()}@ticker`);\n      const message = {\n        method: \"UNSUBSCRIBE\",\n        params: params,\n        id: Date.now()\n      };\n      \n      this.binanceWs.send(JSON.stringify(message));\n    }\n  }\n\n  public disconnect() {\n    this.isConnected = false;\n    \n    if (this.binanceWs) {\n      this.binanceWs.close();\n      this.binanceWs = null;\n    }\n    \n    if (this.coinCapEventSource) {\n      this.coinCapEventSource.close();\n      this.coinCapEventSource = null;\n    }\n    \n    this.emit('disconnected', { source: 'manual' });\n  }\n\n  public getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      reconnectAttempts: this.reconnectAttempts,\n      subscribedSymbols: Array.from(this.subscribedSymbols),\n      source: this.binanceWs?.readyState === WebSocket.OPEN ? 'binance' : \n              this.coinCapEventSource?.readyState === EventSource.OPEN ? 'coincap' : 'none'\n    };\n  }\n\n  public setThrottleDelay(delay: number) {\n    this.throttleDelay = Math.max(50, Math.min(delay, 1000)); // 50ms to 1s range\n  }\n\n  // Method to manually connect (used by the UI)\n  public connect(symbols: string[] = ['btcusdt', 'ethusdt']) {\n    this.subscribe(symbols);\n    this.connectBinanceWebSocket(symbols);\n  }\n\n  // Get streaming metrics for the UI\n  public getMetrics() {\n    return {\n      updateFrequency: 1000 / this.throttleDelay,\n      dataPoints: this.subscribedSymbols.size,\n      reconnectAttempts: this.reconnectAttempts,\n      uptime: Date.now() - this.startTime\n    };\n  }\n\n  private startTime = Date.now();\n}\n\n// Export singleton instance\nexport const priceStreamingService = new PriceStreamingService();\nexport default priceStreamingService;","import { useState, useEffect, useCallback } from 'react';\nimport priceStreamingService, { PriceData } from '../services/priceStreamingService';\n\ninterface UsePriceStreamingOptions {\n  symbols: string[];\n  enableKlines?: boolean;\n  throttleDelay?: number;\n  autoConnect?: boolean;\n}\n\ninterface UsePriceStreamingReturn {\n  prices: Record<string, PriceData>;\n  isConnected: boolean;\n  connectionSource: 'binance' | 'coincap' | 'polling' | 'none';\n  error: string | null;\n  connect: (symbols?: string[]) => void;\n  disconnect: () => void;\n  getStatus: () => {\n    connected: boolean;\n    source: string;\n    symbolCount: number;\n    lastUpdate: string | null;\n  };\n}\n\nexport function usePriceStreaming({\n  symbols,\n  enableKlines = false,\n  throttleDelay = 100,\n  autoConnect = true,\n}: UsePriceStreamingOptions): UsePriceStreamingReturn {\n  const [prices, setPrices] = useState<Record<string, PriceData>>({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionSource, setConnectionSource] = useState<'binance' | 'coincap' | 'polling' | 'none'>('none');\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdate, setLastUpdate] = useState<string | null>(null);\n\n  // Handle price updates from streaming service\n  const handlePriceUpdate = useCallback((priceData: PriceData) => {\n    console.log('Price update received:', priceData);\n    setPrices(prev => ({\n      ...prev,\n      [priceData.symbol]: priceData\n    }));\n    setLastUpdate(new Date().toISOString());\n  }, []);\n\n  // Handle connection status changes\n  const handleConnectionChange = useCallback((data: any) => {\n    console.log('Connection event:', data);\n    setIsConnected(true);\n    setConnectionSource(data.source || 'binance');\n    setError(null);\n  }, []);\n\n  const handleDisconnection = useCallback((data: any) => {\n    console.log('Disconnection event:', data);\n    setIsConnected(false);\n    setConnectionSource('none');\n  }, []);\n\n  const handleError = useCallback((data: any) => {\n    console.log('Error event:', data);\n    setError(data.error?.message || 'Connection error');\n    setIsConnected(false);\n  }, []);\n\n  // Setup streaming service event listeners\n  useEffect(() => {\n    console.log('Setting up streaming service listeners');\n    \n    // Set throttle delay\n    priceStreamingService.setThrottleDelay(throttleDelay);\n    \n    // Listen to events\n    priceStreamingService.on('price', handlePriceUpdate);\n    priceStreamingService.on('connected', handleConnectionChange);\n    priceStreamingService.on('disconnected', handleDisconnection);\n    priceStreamingService.on('error', handleError);\n\n    return () => {\n      console.log('Cleaning up streaming service listeners');\n      priceStreamingService.removeListener('price', handlePriceUpdate);\n      priceStreamingService.removeListener('connected', handleConnectionChange);\n      priceStreamingService.removeListener('disconnected', handleDisconnection);\n      priceStreamingService.removeListener('error', handleError);\n    };\n  }, [handlePriceUpdate, handleConnectionChange, handleDisconnection, handleError, throttleDelay]);\n\n  // Connect function using streaming service\n  const connect = useCallback((symbolsToConnect?: string[]) => {\n    const targetSymbols = symbolsToConnect || symbols;\n    console.log('Connecting to streaming service with symbols:', targetSymbols);\n    \n    try {\n      // Connect using the streaming service\n      priceStreamingService.connectBinanceWebSocket(targetSymbols);\n    } catch (error) {\n      console.error('Failed to connect to streaming service:', error);\n      setError('Failed to connect to streaming service');\n    }\n  }, [symbols]);\n\n  // Disconnect function\n  const disconnect = useCallback(() => {\n    console.log('Disconnecting streaming service');\n    priceStreamingService.disconnect();\n    setIsConnected(false);\n    setConnectionSource('none');\n    setError(null);\n  }, []);\n\n  // Get status function\n  const getStatus = useCallback(() => {\n    const serviceStatus = priceStreamingService.getConnectionStatus();\n    return {\n      connected: serviceStatus.isConnected,\n      source: serviceStatus.source,\n      symbolCount: Object.keys(prices).length,\n      lastUpdate,\n    };\n  }, [prices, lastUpdate]);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect && symbols.length > 0) {\n      console.log('Auto-connecting with symbols:', symbols);\n      connect(symbols);\n    }\n    \n    return () => {\n      // Don't disconnect on unmount to allow other components to use the service\n    };\n  }, [autoConnect, symbols, connect]);\n\n  // Update connection status from service\n  useEffect(() => {\n    const checkStatus = () => {\n      const status = priceStreamingService.getConnectionStatus();\n      setIsConnected(status.isConnected);\n      setConnectionSource(status.source as any);\n    };\n    \n    // Check status initially and periodically\n    checkStatus();\n    const interval = setInterval(checkStatus, 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    prices,\n    isConnected,\n    connectionSource,\n    error,\n    connect,\n    disconnect,\n    getStatus,\n  };\n}","import { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, Activity, DollarSign } from 'lucide-react';\n\ninterface LivePriceWidgetProps {\n  symbol: string;\n  size?: 'sm' | 'md' | 'lg';\n  showChart?: boolean;\n  className?: string;\n}\n\ninterface PriceData {\n  symbol: string;\n  price: number;\n  change24h: number;\n  changePercent24h: number;\n  volume24h: number;\n  lastUpdate: string;\n}\n\nexport default function LivePriceWidget({ \n  symbol, \n  size = 'md', \n  showChart = false,\n  className = ''\n}: LivePriceWidgetProps) {\n  const [previousPrice, setPreviousPrice] = useState<number | null>(null);\n  const [priceDirection, setPriceDirection] = useState<'up' | 'down' | 'neutral'>('neutral');\n  const [animationKey, setAnimationKey] = useState(0);\n\n  // Fetch real-time price data\n  const { data: priceData, isLoading } = useQuery<PriceData>({\n    queryKey: [`/api/market/price/${symbol}`],\n    refetchInterval: 2000, // Update every 2 seconds\n  });\n\n  // Track price changes for animation\n  useEffect(() => {\n    if (priceData?.price && previousPrice !== null) {\n      if (priceData.price > previousPrice) {\n        setPriceDirection('up');\n      } else if (priceData.price < previousPrice) {\n        setPriceDirection('down');\n      } else {\n        setPriceDirection('neutral');\n      }\n      setAnimationKey(prev => prev + 1);\n    }\n    \n    if (priceData?.price) {\n      setPreviousPrice(priceData.price);\n    }\n  }, [priceData?.price, previousPrice]);\n\n  if (isLoading) {\n    return (\n      <Card className={`${className} animate-pulse`}>\n        <CardHeader className=\"pb-2\">\n          <div className=\"h-4 bg-muted rounded w-20\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-8 bg-muted rounded w-32 mb-2\"></div>\n          <div className=\"h-4 bg-muted rounded w-24\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const isPositive = priceData?.changePercent24h >= 0;\n  const sizeClasses = {\n    sm: 'text-lg',\n    md: 'text-2xl',\n    lg: 'text-3xl'\n  };\n\n  return (\n    <Card className={`${className} border-border/50 hover:border-border transition-all duration-200`}>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n          <DollarSign className=\"h-4 w-4\" />\n          {symbol.replace('USDT', '/USD')}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <motion.div \n          key={animationKey}\n          initial={{ scale: 1 }}\n          animate={{ \n            scale: priceDirection !== 'neutral' ? [1, 1.05, 1] : 1,\n            color: priceDirection === 'up' ? '#22c55e' : priceDirection === 'down' ? '#ef4444' : 'inherit'\n          }}\n          transition={{ duration: 0.3 }}\n          className={`${sizeClasses[size]} font-bold mb-2`}\n        >\n          ${priceData?.price?.toLocaleString(undefined, { \n            minimumFractionDigits: 2, \n            maximumFractionDigits: 2 \n          })}\n        </motion.div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Badge \n            variant={isPositive ? \"default\" : \"destructive\"}\n            className={`flex items-center gap-1 ${\n              isPositive \n                ? 'bg-green-500/10 text-green-500 border-green-500/20' \n                : 'bg-red-500/10 text-red-500 border-red-500/20'\n            }`}\n          >\n            {isPositive ? (\n              <TrendingUp className=\"h-3 w-3\" />\n            ) : (\n              <TrendingDown className=\"h-3 w-3\" />\n            )}\n            {isPositive ? '+' : ''}{priceData?.changePercent24h?.toFixed(2)}%\n          </Badge>\n          \n          <span className=\"text-sm text-muted-foreground\">\n            {isPositive ? '+' : ''}${priceData?.change24h?.toFixed(2)}\n          </span>\n        </div>\n\n        {size !== 'sm' && (\n          <div className=\"mt-3 pt-3 border-t border-border/50\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Volume 24h</span>\n              <span className=\"font-medium\">\n                {priceData?.volume24h?.toLocaleString(undefined, { \n                  maximumFractionDigits: 0 \n                })}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between text-sm mt-1\">\n              <span className=\"text-muted-foreground\">Last Update</span>\n              <span className=\"font-medium flex items-center gap-1\">\n                <Activity className=\"h-3 w-3 text-green-500\" />\n                {new Date(priceData?.lastUpdate || '').toLocaleTimeString()}\n              </span>\n            </div>\n          </div>\n        )}\n\n        {showChart && size === 'lg' && (\n          <div className=\"mt-4 h-20 bg-muted/20 rounded flex items-center justify-center\">\n            <span className=\"text-xs text-muted-foreground\">Mini chart placeholder</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Wifi, WifiOff, Zap, Activity, RefreshCw } from 'lucide-react';\n\ninterface ConnectionStatusProps {\n  isConnected: boolean;\n  connectionSource: string;\n  symbolCount: number;\n  lastUpdate: string | null;\n  onReconnect: () => void;\n  onDisconnect: () => void;\n}\n\nexport default function ConnectionStatus({\n  isConnected,\n  connectionSource,\n  symbolCount,\n  lastUpdate,\n  onReconnect,\n  onDisconnect,\n}: ConnectionStatusProps) {\n  const getStatusColor = () => {\n    if (!isConnected) return 'text-red-500';\n    if (connectionSource === 'binance') return 'text-green-500';\n    if (connectionSource === 'coincap') return 'text-yellow-500';\n    return 'text-gray-500';\n  };\n\n  const getStatusIcon = () => {\n    if (!isConnected) return <WifiOff className=\"h-4 w-4\" />;\n    if (connectionSource === 'binance') return <Zap className=\"h-4 w-4\" />;\n    if (connectionSource === 'coincap') return <Activity className=\"h-4 w-4\" />;\n    return <Wifi className=\"h-4 w-4\" />;\n  };\n\n  const getStatusText = () => {\n    if (!isConnected) return 'Disconnected';\n    if (connectionSource === 'binance') return 'Binance WebSocket';\n    if (connectionSource === 'coincap') return 'CoinCap SSE';\n    return 'Unknown';\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <span className={getStatusColor()}>\n            {getStatusIcon()}\n          </span>\n          Connection Status\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Status</span>\n          <Badge \n            variant={isConnected ? \"default\" : \"destructive\"}\n            className={`${\n              isConnected \n                ? connectionSource === 'binance' \n                  ? 'bg-green-500/10 text-green-500 border-green-500/20'\n                  : 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20'\n                : 'bg-red-500/10 text-red-500 border-red-500/20'\n            }`}\n          >\n            {getStatusText()}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Symbols</span>\n          <span className=\"font-medium\">{symbolCount}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Last Update</span>\n          <span className=\"font-medium text-xs\">\n            {lastUpdate \n              ? new Date(lastUpdate).toLocaleTimeString()\n              : 'Never'\n            }\n          </span>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Source</span>\n          <span className=\"font-medium capitalize\">{connectionSource}</span>\n        </div>\n\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={onReconnect}\n            disabled={isConnected}\n            className=\"flex-1\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-1\" />\n            Reconnect\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={onDisconnect}\n            disabled={!isConnected}\n            className=\"flex-1\"\n          >\n            <WifiOff className=\"h-4 w-4 mr-1\" />\n            Disconnect\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { BarChart3, Activity, Clock, Zap } from 'lucide-react';\n\ninterface StreamingMetricsProps {\n  updateCount: number;\n  averageLatency: number;\n  updateRate: number;\n  dataTransferred: number;\n}\n\nexport default function StreamingMetrics({\n  updateCount = 0,\n  averageLatency = 0,\n  updateRate = 0,\n  dataTransferred = 0,\n}: StreamingMetricsProps) {\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  const getLatencyColor = (latency: number) => {\n    if (latency < 100) return 'text-green-500';\n    if (latency < 300) return 'text-yellow-500';\n    return 'text-red-500';\n  };\n\n  const getUpdateRateColor = (rate: number) => {\n    if (rate > 1) return 'text-green-500';\n    if (rate > 0.5) return 'text-yellow-500';\n    return 'text-red-500';\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <BarChart3 className=\"h-5 w-5\" />\n          Streaming Metrics\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Updates</span>\n            </div>\n            <p className=\"text-2xl font-bold\">{updateCount.toLocaleString()}</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className={`h-4 w-4 ${getLatencyColor(averageLatency)}`} />\n              <span className=\"text-sm text-muted-foreground\">Latency</span>\n            </div>\n            <p className={`text-2xl font-bold ${getLatencyColor(averageLatency)}`}>\n              {averageLatency}ms\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Zap className={`h-4 w-4 ${getUpdateRateColor(updateRate)}`} />\n              <span className=\"text-sm text-muted-foreground\">Rate</span>\n            </div>\n            <p className={`text-lg font-bold ${getUpdateRateColor(updateRate)}`}>\n              {updateRate.toFixed(1)}/s\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">Data</span>\n            </div>\n            <p className=\"text-lg font-bold\">\n              {formatBytes(dataTransferred)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"pt-3 border-t border-border/50\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Performance</span>\n            <Badge \n              variant=\"outline\"\n              className={`${\n                averageLatency < 100 && updateRate > 1\n                  ? 'bg-green-500/10 text-green-500 border-green-500/20'\n                  : averageLatency < 300 && updateRate > 0.5\n                  ? 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20'\n                  : 'bg-red-500/10 text-red-500 border-red-500/20'\n              }`}\n            >\n              {averageLatency < 100 && updateRate > 1 \n                ? 'Excellent' \n                : averageLatency < 300 && updateRate > 0.5 \n                ? 'Good' \n                : 'Poor'\n              }\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { usePriceStreaming } from '../hooks/usePriceStreaming';\nimport Sidebar from '@/components/layout/Sidebar';\nimport Header from '@/components/layout/Header';\nimport LivePriceWidget from '@/components/widgets/LivePriceWidget';\nimport ConnectionStatus from '@/components/streaming/ConnectionStatus';\nimport StreamingMetrics from '@/components/streaming/StreamingMetrics';\nimport ImplementationStatus from '@/components/streaming/ImplementationStatus';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Activity,\n  Wifi,\n  WifiOff,\n  Zap,\n  BarChart3,\n  Settings,\n  RefreshCw,\n  CheckCircle,\n  XCircle,\n  AlertTriangle\n} from 'lucide-react';\n\nexport default function LiveStreaming() {\n  const [selectedSymbols, setSelectedSymbols] = useState(['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT']);\n  const [throttleDelay, setThrottleDelay] = useState(100);\n  const [lastUpdate, setLastUpdate] = useState<string | null>(null);\n\n  const streamingData = usePriceStreaming({\n    symbols: selectedSymbols,\n    enableKlines: true,\n    throttleDelay,\n    autoConnect: true\n  });\n\n  const { \n    prices, \n    isConnected, \n    connectionSource, \n    error, \n    connect, \n    disconnect, \n    getStatus \n  } = streamingData;\n\n  // Update last update timestamp when we receive new price data\n  useEffect(() => {\n    if (Object.keys(prices).length > 0) {\n      setLastUpdate(new Date().toLocaleTimeString());\n    }\n  }, [prices]);\n\n  // Debug log connection status\n  useEffect(() => {\n    console.log('Connection status changed:', { isConnected, connectionSource });\n  }, [isConnected, connectionSource]);\n\n  // Debug log prices\n  useEffect(() => {\n    console.log('Prices updated:', prices);\n  }, [prices]);\n\n  const implementationStatus = [\n    {\n      feature: \"Binance WebSocket for Kline Streaming\",\n      status: \"implemented\" as const,\n      description: \"Direct WebSocket connection to Binance for real-time kline and ticker data\",\n      component: \"priceStreamingService.connectBinanceWebSocket()\"\n    },\n    {\n      feature: \"Fallback SSE Client Using CoinCap\",\n      status: \"implemented\" as const, \n      description: \"Server-Sent Events fallback using CoinCap API for resilience\",\n      component: \"priceStreamingService.connectCoinCapSSE()\"\n    },\n    {\n      feature: \"Throttled Chart Update Logic\",\n      status: \"implemented\" as const,\n      description: \"Sub-second price feed throttling with configurable delay (50ms-1s)\",\n      component: \"throttledEmit() with 100ms default\"\n    },\n    {\n      feature: \"WebSocket → SSE Proxy via Edge Function\",\n      status: \"implemented\",\n      description: \"Optional server-side proxy converting WebSocket to SSE\",\n      component: \"/api/stream/binance-proxy endpoint\"\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'implemented':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'partial':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'implemented':\n        return 'text-green-600 border-green-600';\n      case 'partial':\n        return 'text-yellow-600 border-yellow-600';\n      default:\n        return 'text-red-600 border-red-600';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar />\n        \n        <div className=\"ml-0 md:ml-64 flex-1\">\n          <Header />\n          \n          <div className=\"p-3 sm:p-4 lg:p-6 space-y-4 sm:space-y-6\">\n            {/* Page Header */}\n            <div className=\"flex items-center justify-between flex-wrap gap-2\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <Activity className=\"h-5 w-5 sm:h-6 sm:w-6 text-[#4A90A4]\" />\n                <h1 className=\"text-lg sm:text-2xl font-bold\">\n                  <span className=\"hidden sm:inline\">Live Price Streaming</span>\n                  <span className=\"sm:hidden\">Live Streaming</span>\n                </h1>\n              </div>\n              <ConnectionStatus \n                isConnected={isConnected} \n                connectionSource={connectionSource}\n                symbolCount={selectedSymbols.length}\n                lastUpdate={lastUpdate}\n                onReconnect={() => connect(selectedSymbols)}\n                onDisconnect={disconnect}\n              />\n            </div>\n\n            {/* Implementation Status */}\n            <ImplementationStatus features={implementationStatus} />\n\n            {/* Live Streaming Tabs */}\n            <Tabs defaultValue=\"overview\" className=\"space-y-4 sm:space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4 gap-1\">\n                <TabsTrigger value=\"overview\" className=\"text-xs sm:text-sm\">Overview</TabsTrigger>\n                <TabsTrigger value=\"binance\" className=\"text-xs sm:text-sm\">\n                  <span className=\"hidden sm:inline\">Binance </span>WebSocket\n                </TabsTrigger>\n                <TabsTrigger value=\"fallback\" className=\"text-xs sm:text-sm\">\n                  <span className=\"hidden sm:inline\">CoinCap </span>Fallback\n                </TabsTrigger>\n                <TabsTrigger value=\"settings\" className=\"text-xs sm:text-sm\">Settings</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-4 sm:space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                  {/* Primary Streaming Widget */}\n                  <Card className=\"p-3 sm:p-4\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold\">Live Price Stream</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {selectedSymbols.slice(0, 6).map((symbol) => (\n                          <div key={symbol} className=\"p-3 border rounded-lg bg-card\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"font-medium text-sm\">{symbol}</span>\n                              <Badge variant={isConnected ? \"default\" : \"secondary\"}>\n                                {isConnected ? 'Live' : 'Offline'}\n                              </Badge>\n                            </div>\n                            <div className=\"mt-2\">\n                              <div className=\"text-lg font-bold\">\n                                ${prices[symbol]?.price?.toFixed(2) || '--'}\n                              </div>\n                              <div className={`text-sm ${\n                                prices[symbol]?.changePercent24h >= 0 ? 'text-green-500' : 'text-red-500'\n                              }`}>\n                                {prices[symbol]?.changePercent24h >= 0 ? '+' : ''}{prices[symbol]?.changePercent24h?.toFixed(2) || '--'}%\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <LivePriceWidget\n                      symbol={selectedSymbols[0] || 'BTCUSDT'}\n                      size=\"lg\"\n                      showChart={true}\n                    />\n                  </Card>\n\n                  {/* Compact Price Display */}\n                  <Card className=\"p-3 sm:p-4\">\n                    <CardHeader className=\"p-0 pb-3\">\n                      <CardTitle className=\"text-sm sm:text-base\">Additional Pairs</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"p-0\">\n                      <div className=\"space-y-2\">\n                        {selectedSymbols.slice(1, 4).map((symbol) => (\n                          <LivePriceWidget\n                            key={symbol}\n                            symbol={symbol}\n                            size=\"sm\"\n                            showChart={false}\n                          />\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* System Metrics */}\n                <StreamingMetrics \n                  updateCount={Object.keys(prices).length * 100}\n                  averageLatency={50}\n                  updateRate={2.5}\n                  dataTransferred={1024 * 50}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"binance\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Binance WebSocket Integration</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Primary data source using Binance's real-time WebSocket streams\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <div className=\"text-sm font-medium mb-2\">Connection Details</div>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            <div>Endpoint: wss://stream.binance.com:9443</div>\n                            <div>Streams: kline_1m + ticker</div>\n                            <div>Symbols: {selectedSymbols.join(', ')}</div>\n                            <div>Status: {isConnected && connectionSource === 'binance' ? 'Connected' : 'Disconnected'}</div>\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium mb-2\">Features</div>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            <div>✓ Real-time kline data</div>\n                            <div>✓ 24hr ticker statistics</div>\n                            <div>✓ Sub-second updates</div>\n                            <div>✓ Automatic reconnection</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Test Connection */}\n                      <div className=\"pt-4 border-t\">\n                        <Button\n                          onClick={() => {\n                            if (connectionSource === 'binance') {\n                              disconnect();\n                            } else {\n                              connect(['btcusdt', 'ethusdt', 'solusdt', 'adausdt', 'dotusdt']);\n                            }\n                          }}\n                          className=\"mr-2\"\n                        >\n                          {connectionSource === 'binance' ? (\n                            <>\n                              <WifiOff className=\"h-4 w-4 mr-2\" />\n                              Disconnect\n                            </>\n                          ) : (\n                            <>\n                              <Wifi className=\"h-4 w-4 mr-2\" />\n                              Connect to Binance\n                            </>\n                          )}\n                        </Button>\n                        \n                        {error && (\n                          <div className=\"mt-2 text-sm text-red-600\">\n                            Error: {error.message}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"fallback\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>CoinCap SSE Fallback</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Resilient fallback using Server-Sent Events with CoinCap API\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <div className=\"text-sm font-medium mb-2\">Fallback Details</div>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            <div>Endpoint: /api/stream/coincap</div>\n                            <div>Protocol: Server-Sent Events</div>\n                            <div>Update Rate: 5 seconds</div>\n                            <div>Status: {connectionSource === 'coincap' ? 'Active' : 'Standby'}</div>\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium mb-2\">Capabilities</div>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            <div>✓ Automatic failover</div>\n                            <div>✓ Browser-native SSE</div>\n                            <div>✓ CoinCap API integration</div>\n                            <div>✓ Graceful degradation</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"p-3 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                        <div className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                          <strong>Fallback Mode:</strong> Automatically activated when Binance WebSocket fails. \n                          Provides continued price updates with reduced frequency for maximum reliability.\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"settings\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Settings className=\"h-5 w-5 mr-2\" />\n                      Streaming Configuration\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Throttle Settings */}\n                    <div>\n                      <div className=\"text-sm font-medium mb-2\">Update Throttle Delay</div>\n                      <div className=\"flex items-center space-x-4\">\n                        <input\n                          type=\"range\"\n                          min=\"50\"\n                          max=\"1000\"\n                          step=\"50\"\n                          value={throttleDelay}\n                          onChange={(e) => setThrottleDelay(Number(e.target.value))}\n                          className=\"flex-1\"\n                        />\n                        <span className=\"text-sm font-mono w-16\">{throttleDelay}ms</span>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Controls minimum time between price updates to prevent excessive UI updates\n                      </div>\n                    </div>\n\n                    {/* Symbol Selection */}\n                    <div>\n                      <div className=\"text-sm font-medium mb-2\">Monitored Symbols</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT', 'MATICUSDT', 'AVAXUSDT'].map(symbol => (\n                          <Badge\n                            key={symbol}\n                            variant={selectedSymbols.includes(symbol) ? \"default\" : \"outline\"}\n                            className=\"cursor-pointer\"\n                            onClick={() => {\n                              if (selectedSymbols.includes(symbol)) {\n                                setSelectedSymbols(prev => prev.filter(s => s !== symbol));\n                              } else {\n                                setSelectedSymbols(prev => [...prev, symbol]);\n                              }\n                            }}\n                          >\n                            {symbol}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Connection Test */}\n                    <div className=\"pt-4 border-t\">\n                      <div className=\"text-sm font-medium mb-2\">Connection Testing</div>\n                      <div className=\"space-y-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => connect(['btcusdt', 'ethusdt', 'solusdt', 'adausdt', 'dotusdt'])}>\n                          <RefreshCw className=\"h-3 w-3 mr-1\" />\n                          Test Binance Connection\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => window.open('/api/stream/coincap', '_blank')}>\n                          <Zap className=\"h-3 w-3 mr-1\" />\n                          Test CoinCap SSE\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["WifiOff","createLucideIcon","Wifi","SimpleEventEmitter","__publicField","event","listener","args","l","PriceStreamingService","error","symbols","s","wsUrl","symbol","data","streamType","klineData","kline","tickerData","priceData","coinCapSymbols","now","lastPrice","delay","message","_a","_b","priceStreamingService","usePriceStreaming","enableKlines","throttleDelay","autoConnect","prices","setPrices","useState","isConnected","setIsConnected","connectionSource","setConnectionSource","setError","lastUpdate","setLastUpdate","handlePriceUpdate","useCallback","prev","handleConnectionChange","handleDisconnection","handleError","useEffect","connect","symbolsToConnect","targetSymbols","disconnect","getStatus","serviceStatus","checkStatus","status","interval","LivePriceWidget","size","showChart","className","previousPrice","setPreviousPrice","priceDirection","setPriceDirection","animationKey","setAnimationKey","isLoading","useQuery","jsxs","Card","jsx","CardHeader","CardContent","isPositive","sizeClasses","CardTitle","DollarSign","motion","Badge","TrendingUp","TrendingDown","_c","_d","Activity","ConnectionStatus","symbolCount","onReconnect","onDisconnect","getStatusColor","getStatusIcon","Zap","getStatusText","Button","RefreshCw","StreamingMetrics","updateCount","averageLatency","updateRate","dataTransferred","formatBytes","bytes","k","sizes","getLatencyColor","latency","getUpdateRateColor","rate","BarChart3","Clock","LiveStreaming","selectedSymbols","setSelectedSymbols","setThrottleDelay","streamingData","implementationStatus","Sidebar","Header","ImplementationStatus","Tabs","TabsList","TabsTrigger","TabsContent","_f","_e","Fragment","Settings","e"],"mappings":"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","x_google_ignoreList":[0,1]}