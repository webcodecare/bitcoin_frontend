{"version":3,"file":"payments-xYo6qi6V.js","sources":["../../src/pages/admin/payments.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { CreditCard, RefreshCw, AlertCircle, CheckCircle, XCircle, Clock, Search, Filter } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport Header from \"@/components/layout/Header\";\n\ninterface PaymentLog {\n  id: string;\n  userId: string;\n  userEmail: string;\n  subscriptionId: string;\n  amount: number;\n  currency: string;\n  status: \"succeeded\" | \"failed\" | \"pending\" | \"cancelled\" | \"refunded\";\n  paymentMethod: string;\n  stripePaymentId: string;\n  gatewayResponse: any;\n  errorCode?: string;\n  errorMessage?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface PaymentAnalytics {\n  totalRevenue: number;\n  successfulPayments: number;\n  failedPayments: number;\n  refundedAmount: number;\n  averageTransactionAmount: number;\n  conversionRate: number;\n}\n\nexport default function AdminPayments() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedPayment, setSelectedPayment] = useState<PaymentLog | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: payments = [], isLoading } = useQuery<PaymentLog[]>({\n    queryKey: [\"/api/admin/payments\", searchTerm, statusFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchTerm) params.append(\"search\", searchTerm);\n      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      \n      const response = await fetch(`/api/admin/payments?${params}`);\n      return response.json();\n    },\n  });\n\n  const { data: analytics } = useQuery<PaymentAnalytics>({\n    queryKey: [\"/api/admin/payments/analytics\"],\n  });\n\n  const retryPaymentMutation = useMutation({\n    mutationFn: async (paymentId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/payments/${paymentId}/retry`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/payments\"] });\n      toast({\n        title: \"Payment Retry Initiated\",\n        description: \"The payment retry has been initiated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Retry Failed\",\n        description: error.message || \"Failed to retry payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const refundPaymentMutation = useMutation({\n    mutationFn: async (paymentId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/payments/${paymentId}/refund`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/payments\"] });\n      toast({\n        title: \"Refund Processed\",\n        description: \"The payment refund has been processed.\",\n      });\n    },\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"succeeded\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case \"pending\":\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case \"cancelled\":\n        return <XCircle className=\"h-4 w-4 text-gray-500\" />;\n      case \"refunded\":\n        return <RefreshCw className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"succeeded\":\n        return <Badge variant=\"default\" className=\"bg-green-500\">Succeeded</Badge>;\n      case \"failed\":\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      case \"pending\":\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"outline\">Cancelled</Badge>;\n      case \"refunded\":\n        return <Badge variant=\"secondary\" className=\"bg-blue-500\">Refunded</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = \"USD\") => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount / 100);\n  };\n\n  const filteredPayments = payments.filter(payment => {\n    const matchesSearch = !searchTerm || \n      payment.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      payment.stripePaymentId.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || payment.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const viewPaymentDetails = (payment: PaymentLog) => {\n    setSelectedPayment(payment);\n    setIsDetailsOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar className=\"hidden lg:block lg:w-64\" />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 lg:ml-64\">\n          {/* Header */}\n          <Header \n            title=\"Payment Management\" \n            subtitle=\"Monitor payment transactions and gateway responses\"\n          />\n\n          {/* Content */}\n          <div className=\"p-4 lg:p-6 space-y-6\">\n\n      <Tabs defaultValue=\"logs\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"logs\">Payment Logs</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"failed\">Failed Payments</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          {/* Filters */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by email or payment ID...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Filter className=\"h-4 w-4 text-muted-foreground\" />\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"succeeded\">Succeeded</SelectItem>\n                      <SelectItem value=\"failed\">Failed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      <SelectItem value=\"refunded\">Refunded</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Logs Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"space-y-2 p-4\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\"></div>\n                  ))}\n                </div>\n              ) : filteredPayments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <CreditCard className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No payment logs found</p>\n                </div>\n              ) : (\n                <div className=\"divide-y\">\n                  {filteredPayments.map((payment) => (\n                    <div key={payment.id} className=\"p-4 hover:bg-gray-50 cursor-pointer\" onClick={() => viewPaymentDetails(payment)}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          {getStatusIcon(payment.status)}\n                          <div>\n                            <h4 className=\"font-medium\">{payment.userEmail}</h4>\n                            <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                              <span>{payment.stripePaymentId}</span>\n                              <span>•</span>\n                              <span>{new Date(payment.createdAt).toLocaleDateString()}</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">{formatCurrency(payment.amount, payment.currency)}</p>\n                            <p className=\"text-sm text-muted-foreground\">{payment.paymentMethod}</p>\n                          </div>\n                          {getStatusBadge(payment.status)}\n                          {payment.status === \"failed\" && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                retryPaymentMutation.mutate(payment.id);\n                              }}\n                              disabled={retryPaymentMutation.isPending}\n                            >\n                              <RefreshCw className=\"h-4 w-4 mr-1\" />\n                              Retry\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      {payment.errorMessage && (\n                        <div className=\"mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n                          <strong>Error:</strong> {payment.errorMessage}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          {analytics && (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                        <p className=\"text-2xl font-bold\">{formatCurrency(analytics.totalRevenue)}</p>\n                      </div>\n                      <CreditCard className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Successful Payments</p>\n                        <p className=\"text-2xl font-bold\">{analytics.successfulPayments}</p>\n                      </div>\n                      <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Failed Payments</p>\n                        <p className=\"text-2xl font-bold\">{analytics.failedPayments}</p>\n                      </div>\n                      <XCircle className=\"h-8 w-8 text-red-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Refunded Amount</p>\n                        <p className=\"text-2xl font-bold\">{formatCurrency(analytics.refundedAmount)}</p>\n                      </div>\n                      <RefreshCw className=\"h-8 w-8 text-blue-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Avg Transaction</p>\n                        <p className=\"text-2xl font-bold\">{formatCurrency(analytics.averageTransactionAmount)}</p>\n                      </div>\n                      <CreditCard className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Conversion Rate</p>\n                        <p className=\"text-2xl font-bold\">{analytics.conversionRate.toFixed(1)}%</p>\n                      </div>\n                      <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"failed\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Failed Payments</CardTitle>\n              <CardDescription>Review and manage failed payment attempts</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {payments\n                  .filter(p => p.status === \"failed\")\n                  .map((payment) => (\n                    <div key={payment.id} className=\"flex items-center justify-between p-4 border rounded-lg bg-red-50\">\n                      <div className=\"flex items-center space-x-4\">\n                        <XCircle className=\"h-5 w-5 text-red-500\" />\n                        <div>\n                          <h4 className=\"font-medium\">{payment.userEmail}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {formatCurrency(payment.amount)} • {new Date(payment.createdAt).toLocaleDateString()}\n                          </p>\n                          {payment.errorMessage && (\n                            <p className=\"text-sm text-red-600 mt-1\">{payment.errorMessage}</p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => viewPaymentDetails(payment)}\n                        >\n                          View Details\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => retryPaymentMutation.mutate(payment.id)}\n                          disabled={retryPaymentMutation.isPending}\n                        >\n                          <RefreshCw className=\"h-4 w-4 mr-1\" />\n                          Retry\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                {payments.filter(p => p.status === \"failed\").length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No failed payments</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Payment Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Payment Details</DialogTitle>\n            <DialogDescription>Detailed payment information and gateway response</DialogDescription>\n          </DialogHeader>\n          {selectedPayment && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Payment ID</Label>\n                  <p className=\"text-sm\">{selectedPayment.stripePaymentId}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedPayment.status)}</div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">User Email</Label>\n                  <p className=\"text-sm\">{selectedPayment.userEmail}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Amount</Label>\n                  <p className=\"text-sm\">{formatCurrency(selectedPayment.amount, selectedPayment.currency)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Payment Method</Label>\n                  <p className=\"text-sm\">{selectedPayment.paymentMethod}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Created At</Label>\n                  <p className=\"text-sm\">{new Date(selectedPayment.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n              \n              {selectedPayment.errorMessage && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Error Message</Label>\n                  <p className=\"text-sm text-red-600 mt-1\">{selectedPayment.errorMessage}</p>\n                </div>\n              )}\n\n              <div>\n                <Label className=\"text-sm font-medium\">Gateway Response</Label>\n                <pre className=\"text-xs bg-gray-50 p-3 rounded mt-1 overflow-auto max-h-40\">\n                  {JSON.stringify(selectedPayment.gatewayResponse, null, 2)}\n                </pre>\n              </div>\n\n              <div className=\"flex space-x-2\">\n                {selectedPayment.status === \"succeeded\" && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => refundPaymentMutation.mutate(selectedPayment.id)}\n                    disabled={refundPaymentMutation.isPending}\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Process Refund\n                  </Button>\n                )}\n                {selectedPayment.status === \"failed\" && (\n                  <Button\n                    onClick={() => retryPaymentMutation.mutate(selectedPayment.id)}\n                    disabled={retryPaymentMutation.isPending}\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Retry Payment\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["AdminPayments","searchTerm","setSearchTerm","useState","statusFilter","setStatusFilter","selectedPayment","setSelectedPayment","isDetailsOpen","setIsDetailsOpen","toast","useToast","payments","isLoading","useQuery","params","analytics","retryPaymentMutation","useMutation","paymentId","apiRequest","queryClient","error","refundPaymentMutation","getStatusIcon","status","jsx","CheckCircle","XCircle","Clock","RefreshCw","AlertCircle","getStatusBadge","Badge","formatCurrency","amount","currency","filteredPayments","payment","matchesSearch","matchesStatus","viewPaymentDetails","jsxs","Sidebar","Header","Tabs","TabsList","TabsTrigger","TabsContent","Card","CardContent","Search","Input","e","Filter","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","_","i","CreditCard","Button","Fragment","CardHeader","CardTitle","CardDescription","p","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label"],"mappings":"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"}