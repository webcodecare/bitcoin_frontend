{"version":3,"file":"AdvancedForecastChart-UJjj3Noc.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/brain.js","../../../node_modules/lucide-react/dist/esm/icons/calculator.js","../../../node_modules/lucide-react/dist/esm/icons/circle-check.js","../../../node_modules/lucide-react/dist/esm/icons/waves.js","../../src/components/charts/AdvancedForecastChart.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Brain = createLucideIcon(\"Brain\", [\n  [\n    \"path\",\n    {\n      d: \"M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z\",\n      key: \"l5xja\"\n    }\n  ],\n  [\n    \"path\",\n    {\n      d: \"M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z\",\n      key: \"ep3f8r\"\n    }\n  ],\n  [\"path\", { d: \"M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4\", key: \"1p4c4q\" }],\n  [\"path\", { d: \"M17.599 6.5a3 3 0 0 0 .399-1.375\", key: \"tmeiqw\" }],\n  [\"path\", { d: \"M6.003 5.125A3 3 0 0 0 6.401 6.5\", key: \"105sqy\" }],\n  [\"path\", { d: \"M3.477 10.896a4 4 0 0 1 .585-.396\", key: \"ql3yin\" }],\n  [\"path\", { d: \"M19.938 10.5a4 4 0 0 1 .585.396\", key: \"1qfode\" }],\n  [\"path\", { d: \"M6 18a4 4 0 0 1-1.967-.516\", key: \"2e4loj\" }],\n  [\"path\", { d: \"M19.967 17.484A4 4 0 0 1 18 18\", key: \"159ez6\" }]\n]);\n\nexport { Brain as default };\n//# sourceMappingURL=brain.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Calculator = createLucideIcon(\"Calculator\", [\n  [\"rect\", { width: \"16\", height: \"20\", x: \"4\", y: \"2\", rx: \"2\", key: \"1nb95v\" }],\n  [\"line\", { x1: \"8\", x2: \"16\", y1: \"6\", y2: \"6\", key: \"x4nwl0\" }],\n  [\"line\", { x1: \"16\", x2: \"16\", y1: \"14\", y2: \"18\", key: \"wjye3r\" }],\n  [\"path\", { d: \"M16 10h.01\", key: \"1m94wz\" }],\n  [\"path\", { d: \"M12 10h.01\", key: \"1nrarc\" }],\n  [\"path\", { d: \"M8 10h.01\", key: \"19clt8\" }],\n  [\"path\", { d: \"M12 14h.01\", key: \"1etili\" }],\n  [\"path\", { d: \"M8 14h.01\", key: \"6423bh\" }],\n  [\"path\", { d: \"M12 18h.01\", key: \"mhygvu\" }],\n  [\"path\", { d: \"M8 18h.01\", key: \"lrp35t\" }]\n]);\n\nexport { Calculator as default };\n//# sourceMappingURL=calculator.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleCheck = createLucideIcon(\"CircleCheck\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m9 12 2 2 4-4\", key: \"dzmm74\" }]\n]);\n\nexport { CircleCheck as default };\n//# sourceMappingURL=circle-check.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Waves = createLucideIcon(\"Waves\", [\n  [\n    \"path\",\n    {\n      d: \"M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1\",\n      key: \"knzxuh\"\n    }\n  ],\n  [\n    \"path\",\n    {\n      d: \"M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1\",\n      key: \"2jd2cc\"\n    }\n  ],\n  [\n    \"path\",\n    {\n      d: \"M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1\",\n      key: \"rd2r6e\"\n    }\n  ]\n]);\n\nexport { Waves as default };\n//# sourceMappingURL=waves.js.map\n","import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Activity,\n  TrendingUp,\n  Target,\n  BarChart3,\n  Zap,\n  Brain,\n  Calculator,\n  LineChart,\n  PieChart,\n  Waves,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle2\n} from \"lucide-react\";\n\ninterface AdvancedForecastChartProps {\n  ticker: string;\n}\n\ninterface ForecastModel {\n  name: string;\n  accuracy: number;\n  confidence: number;\n  lastCalibrated: string;\n  [key: string]: any;\n}\n\ninterface ForecastData {\n  date: string;\n  predictedPrice: number;\n  confidenceLow: number;\n  confidenceHigh: number;\n  modelType: string;\n  marketRegime: string;\n  cyclePhase: string;\n  volatilityForecast: number;\n  trendStrength: number;\n  supportLevels: number[];\n  resistanceLevels: number[];\n}\n\nexport default function AdvancedForecastChart({ ticker }: AdvancedForecastChartProps) {\n  const [selectedHorizon, setSelectedHorizon] = useState(30);\n  const [isGenerating, setIsGenerating] = useState(false);\n  \n  // Fetch model performance metrics\n  const { data: modelMetricsData = [], isLoading: modelsLoading } = useQuery({\n    queryKey: [`/api/public/forecast/models/${ticker}`],\n  });\n  \n  // Ensure modelMetrics is always an array\n  const modelMetrics = Array.isArray(modelMetricsData) ? modelMetricsData : [];\n\n  // Generate forecast mutation\n  const generateForecast = useMutation({\n    mutationFn: async (horizon: number) => {\n      setIsGenerating(true);\n      console.log(`Generating forecast for ${ticker} with horizon ${horizon}`);\n      const response = await apiRequest(\"POST\", `/api/public/forecast/advanced/${ticker}`, {\n        horizon\n      });\n      console.log('Forecast response:', response);\n      return response as any;\n    },\n    onSuccess: (data) => {\n      setIsGenerating(false);\n      console.log('Forecast generation successful:', data);\n    },\n    onError: (error) => {\n      setIsGenerating(false);\n      console.error('Forecast generation failed:', error);\n    }\n  });\n\n  const forecastData = generateForecast.data?.forecast || [];\n  const overallConfidence = generateForecast.data?.overallConfidence || 0;\n  const models = generateForecast.data?.models || [];\n\n  const handleGenerateForecast = () => {\n    generateForecast.mutate(selectedHorizon);\n  };\n\n  const getModelIcon = (modelName: string) => {\n    switch (modelName.toLowerCase()) {\n      case 'fourier transform': return <Waves className=\"h-4 w-4\" />;\n      case 'elliott wave': return <Activity className=\"h-4 w-4\" />;\n      case 'gann analysis': return <Calculator className=\"h-4 w-4\" />;\n      case 'harmonic patterns': return <Target className=\"h-4 w-4\" />;\n      case 'fractal dimension': return <Brain className=\"h-4 w-4\" />;\n      case 'entropy analysis': return <BarChart3 className=\"h-4 w-4\" />;\n      default: return <LineChart className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRegimeColor = (regime: string) => {\n    switch (regime) {\n      case 'bull': return 'bg-green-500';\n      case 'bear': return 'bg-red-500';\n      case 'volatile': return 'bg-orange-500';\n      case 'sideways': return 'bg-blue-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCyclePhaseColor = (phase: string) => {\n    switch (phase) {\n      case 'accumulation': return 'bg-blue-500';\n      case 'markup': return 'bg-green-500';\n      case 'distribution': return 'bg-orange-500';\n      case 'markdown': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Control Panel */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Advanced Cycle Forecasting - {ticker.replace('USDT', '')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <label className=\"text-sm font-medium\">Forecast Horizon:</label>\n              <select \n                value={selectedHorizon}\n                onChange={(e) => setSelectedHorizon(Number(e.target.value))}\n                className=\"px-3 py-1 border rounded-md text-sm\"\n              >\n                <option value={7}>7 Days</option>\n                <option value={14}>14 Days</option>\n                <option value={30}>30 Days</option>\n                <option value={60}>60 Days</option>\n                <option value={90}>90 Days</option>\n              </select>\n            </div>\n            \n            <Button \n              onClick={handleGenerateForecast}\n              disabled={isGenerating}\n              className=\"flex items-center gap-2\"\n            >\n              {isGenerating ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Zap className=\"h-4 w-4\" />\n              )}\n              {isGenerating ? 'Generating...' : 'Generate Forecast'}\n            </Button>\n          </div>\n\n          {overallConfidence > 0 && (\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Overall Confidence:</span>\n                <Progress value={overallConfidence * 100} className=\"w-24\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  {(overallConfidence * 100).toFixed(1)}%\n                </span>\n              </div>\n              \n              {generateForecast.data?.generatedAt && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Generated: {new Date(generateForecast.data.generatedAt).toLocaleTimeString()}\n                </Badge>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"models\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"models\">Algorithm Models</TabsTrigger>\n          <TabsTrigger value=\"forecast\">Price Forecast</TabsTrigger>\n          <TabsTrigger value=\"analysis\">Market Analysis</TabsTrigger>\n          <TabsTrigger value=\"levels\">Support/Resistance</TabsTrigger>\n        </TabsList>\n\n        {/* Algorithm Models Tab */}\n        <TabsContent value=\"models\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {modelMetrics.map((model: ForecastModel, index: number) => (\n              <Card key={index}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {getModelIcon(model.name)}\n                      {model.name}\n                    </div>\n                    <Badge variant={model.accuracy > 0.75 ? \"default\" : \"secondary\"}>\n                      {(model.accuracy * 100).toFixed(1)}%\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-muted-foreground\">Confidence</span>\n                    <div className=\"flex items-center gap-2\">\n                      <Progress value={model.confidence * 100} className=\"w-16 h-2\" />\n                      <span className=\"text-xs\">{(model.confidence * 100).toFixed(0)}%</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    <span className=\"text-xs text-muted-foreground\">Last Calibrated</span>\n                    <div className=\"text-xs\">\n                      {new Date(model.lastCalibrated).toLocaleDateString()}\n                    </div>\n                  </div>\n\n                  {/* Model-specific metrics */}\n                  {model.dominantCycles && (\n                    <div className=\"space-y-1\">\n                      <span className=\"text-xs text-muted-foreground\">Dominant Cycles</span>\n                      <div className=\"flex gap-1\">\n                        {model.dominantCycles.slice(0, 3).map((cycle: number, i: number) => (\n                          <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                            {cycle}d\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {model.currentWave && (\n                    <div className=\"space-y-1\">\n                      <span className=\"text-xs text-muted-foreground\">Current Wave</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Wave {model.currentWave}\n                      </Badge>\n                    </div>\n                  )}\n\n                  {model.detectedPatterns && (\n                    <div className=\"space-y-1\">\n                      <span className=\"text-xs text-muted-foreground\">Patterns</span>\n                      <div className=\"flex gap-1\">\n                        {model.detectedPatterns.map((pattern: string, i: number) => (\n                          <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                            {pattern}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {model.regime && (\n                    <div className=\"space-y-1\">\n                      <span className=\"text-xs text-muted-foreground\">Market Regime</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {model.regime}\n                      </Badge>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Price Forecast Tab */}\n        <TabsContent value=\"forecast\" className=\"space-y-4\">\n          {forecastData.length > 0 ? (\n            <div className=\"space-y-4\">\n              {/* Forecast Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        ${forecastData[selectedHorizon - 1]?.predictedPrice?.toLocaleString() || 'N/A'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedHorizon}-Day Target\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold\">\n                        ${forecastData[selectedHorizon - 1]?.confidenceLow?.toLocaleString() || 'N/A'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Support Range</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold\">\n                        ${forecastData[selectedHorizon - 1]?.confidenceHigh?.toLocaleString() || 'N/A'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Resistance Range</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold flex items-center justify-center gap-2\">\n                        <div className={`w-3 h-3 rounded-full ${getRegimeColor(forecastData[0]?.marketRegime)}`} />\n                        {forecastData[0]?.marketRegime || 'Unknown'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Market Regime</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Forecast Timeline */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Price Forecast Timeline</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {forecastData.slice(0, 14).map((forecast: ForecastData, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 border-b\">\n                        <div className=\"flex items-center gap-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Day {index + 1}\n                          </Badge>\n                          <span className=\"text-sm\">\n                            {new Date(forecast.date).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">\n                              ${forecast.predictedPrice?.toLocaleString()}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              ${forecast.confidenceLow?.toLocaleString()} - ${forecast.confidenceHigh?.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <div className={`w-2 h-2 rounded-full ${getCyclePhaseColor(forecast.cyclePhase)}`} />\n                            <span className=\"text-xs\">{forecast.cyclePhase}</span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <TrendingUp className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  Generate an advanced forecast to view price predictions\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Market Analysis Tab */}\n        <TabsContent value=\"analysis\" className=\"space-y-4\">\n          {models.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {models.map((model: any, index: number) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      {getModelIcon(model.name)}\n                      {model.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {model.cycles && (\n                      <div>\n                        <span className=\"text-xs text-muted-foreground\">Detected Cycles</span>\n                        <div className=\"flex gap-1 mt-1\">\n                          {model.cycles.map((cycle: number, i: number) => (\n                            <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                              {cycle} days\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {model.currentWave && (\n                      <div>\n                        <span className=\"text-xs text-muted-foreground\">Elliott Wave Analysis</span>\n                        <div className=\"mt-1\">\n                          <Badge variant=\"secondary\">Wave {model.currentWave}</Badge>\n                        </div>\n                      </div>\n                    )}\n\n                    {model.patterns && (\n                      <div>\n                        <span className=\"text-xs text-muted-foreground\">Harmonic Patterns</span>\n                        <div className=\"flex gap-1 mt-1\">\n                          {model.patterns.map((pattern: string, i: number) => (\n                            <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                              {pattern}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {model.regime && (\n                      <div>\n                        <span className=\"text-xs text-muted-foreground\">Market Regime</span>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <div className={`w-3 h-3 rounded-full ${getRegimeColor(model.regime)}`} />\n                          <span className=\"text-sm\">{model.regime}</span>\n                        </div>\n                      </div>\n                    )}\n\n                    {typeof model.strength === 'number' && (\n                      <div>\n                        <span className=\"text-xs text-muted-foreground\">Signal Strength</span>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Progress value={model.strength * 100} className=\"w-20 h-2\" />\n                          <span className=\"text-xs\">{(model.strength * 100).toFixed(0)}%</span>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <BarChart3 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  Generate a forecast to view detailed market analysis\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Support/Resistance Tab */}\n        <TabsContent value=\"levels\" className=\"space-y-4\">\n          {forecastData.length > 0 && forecastData[0]?.supportLevels ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                    Support Levels\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {forecastData[0].supportLevels?.slice(0, 5).map((level: number, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                        <span className=\"text-sm font-medium\">Support {index + 1}</span>\n                        <span className=\"font-mono\">${level?.toLocaleString()}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                    Resistance Levels\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {forecastData[0].resistanceLevels?.slice(0, 5).map((level: number, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-red-50 dark:bg-red-900/20 rounded\">\n                        <span className=\"text-sm font-medium\">Resistance {index + 1}</span>\n                        <span className=\"font-mono\">${level?.toLocaleString()}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Target className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  Generate a forecast to view support and resistance levels\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":["Brain","createLucideIcon","Calculator","CircleCheck","Waves","AdvancedForecastChart","ticker","selectedHorizon","setSelectedHorizon","useState","isGenerating","setIsGenerating","modelMetricsData","modelsLoading","useQuery","modelMetrics","generateForecast","useMutation","horizon","response","apiRequest","data","error","forecastData","_a","overallConfidence","_b","models","_c","handleGenerateForecast","getModelIcon","modelName","jsx","Activity","Target","BarChart3","LineChart","getRegimeColor","regime","getCyclePhaseColor","phase","jsxs","Card","CardHeader","CardTitle","CardContent","e","Button","RefreshCw","Zap","Progress","_d","Badge","Tabs","TabsList","TabsTrigger","TabsContent","model","index","cycle","i","pattern","_f","_e","_h","_g","_j","_i","_k","_l","forecast","TrendingUp","_m","CheckCircle2","_n","level","AlertTriangle","_o"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}