{"version":3,"file":"subscriptions-CMWCeLcJ.js","sources":["../../src/pages/admin/subscriptions.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { CreditCard, Edit, Trash2, Plus, Users, TrendingUp, DollarSign, Calendar } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport Header from \"@/components/layout/Header\";\n\ninterface UserSubscription {\n  id: string;\n  userId: string;\n  userEmail: string;\n  userName: string;\n  planTier: string;\n  planName: string;\n  status: \"active\" | \"cancelled\" | \"expired\" | \"pending\";\n  startDate: string;\n  endDate: string;\n  amount: number;\n  stripeSubscriptionId?: string;\n  lastPayment: string;\n  nextPayment: string;\n}\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  tier: string;\n  monthlyPrice: number;\n  yearlyPrice: number | null;\n  features: string[];\n  maxSignals: number | null;\n  maxTickers: number | null;\n  isActive: boolean;\n}\n\nexport default function AdminSubscriptions() {\n  const [selectedPlan, setSelectedPlan] = useState<SubscriptionPlan | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newPlan, setNewPlan] = useState({\n    name: \"\",\n    tier: \"\",\n    monthlyPrice: 0,\n    yearlyPrice: 0,\n    features: [\"\"],\n    maxSignals: 0,\n    maxTickers: 0,\n  });\n  const { toast } = useToast();\n\n  const { data: subscriptions = [], isLoading: subscriptionsLoading } = useQuery<UserSubscription[]>({\n    queryKey: [\"/api/admin/subscriptions\"],\n  });\n\n  const { data: plans = [], isLoading: plansLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: async (planData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/subscription-plans\", planData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n      setIsCreateDialogOpen(false);\n      setNewPlan({\n        name: \"\",\n        tier: \"\",\n        monthlyPrice: 0,\n        yearlyPrice: 0,\n        features: [\"\"],\n        maxSignals: 0,\n        maxTickers: 0,\n      });\n      toast({\n        title: \"Plan Created\",\n        description: \"Subscription plan created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Creation Failed\",\n        description: error.message || \"Failed to create plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/subscription-plans/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n      setIsEditDialogOpen(false);\n      setSelectedPlan(null);\n      toast({\n        title: \"Plan Updated\",\n        description: \"Subscription plan updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlanMutation = useMutation({\n    mutationFn: async (planId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/subscription-plans/${planId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subscription-plans\"] });\n      toast({\n        title: \"Plan Deleted\",\n        description: \"Subscription plan deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelSubscriptionMutation = useMutation({\n    mutationFn: async (subscriptionId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/subscriptions/${subscriptionId}/cancel`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/subscriptions\"] });\n      toast({\n        title: \"Subscription Cancelled\",\n        description: \"User subscription has been cancelled.\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"default\">Active</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"destructive\">Cancelled</Badge>;\n      case \"expired\":\n        return <Badge variant=\"secondary\">Expired</Badge>;\n      case \"pending\":\n        return <Badge variant=\"outline\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount / 100);\n  };\n\n  const handleEditPlan = (plan: SubscriptionPlan) => {\n    setSelectedPlan(plan);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdatePlan = () => {\n    if (!selectedPlan) return;\n    \n    const planData = {\n      ...selectedPlan,\n      features: selectedPlan.features.filter(f => f.trim()),\n      monthlyPrice: selectedPlan.monthlyPrice,\n      yearlyPrice: selectedPlan.yearlyPrice,\n      maxSignals: selectedPlan.maxSignals === 0 ? -1 : selectedPlan.maxSignals,\n      maxTickers: selectedPlan.maxTickers === 0 ? -1 : selectedPlan.maxTickers,\n    };\n    updatePlanMutation.mutate({ id: selectedPlan.id, data: planData });\n  };\n\n  const handleDeletePlan = (planId: string) => {\n    if (confirm(\"Are you sure you want to delete this plan? This action cannot be undone.\")) {\n      deletePlanMutation.mutate(planId);\n    }\n  };\n\n  const handleCreatePlan = () => {\n    const planData = {\n      ...newPlan,\n      features: newPlan.features.filter(f => f.trim()),\n      monthlyPrice: newPlan.monthlyPrice * 100, // Convert to cents\n      yearlyPrice: newPlan.yearlyPrice ? newPlan.yearlyPrice * 100 : null,\n      maxSignals: newPlan.maxSignals === 0 ? -1 : newPlan.maxSignals,\n      maxTickers: newPlan.maxTickers === 0 ? -1 : newPlan.maxTickers,\n    };\n    createPlanMutation.mutate(planData);\n  };\n\n  const updateFeature = (index: number, value: string) => {\n    const features = [...newPlan.features];\n    features[index] = value;\n    setNewPlan(prev => ({ ...prev, features }));\n  };\n\n  const addFeature = () => {\n    setNewPlan(prev => ({ ...prev, features: [...prev.features, \"\"] }));\n  };\n\n  const removeFeature = (index: number) => {\n    const features = newPlan.features.filter((_, i) => i !== index);\n    setNewPlan(prev => ({ ...prev, features }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar className=\"hidden lg:block lg:w-64\" />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 lg:ml-64\">\n          {/* Header */}\n          <Header \n            title=\"Subscription Management\" \n            subtitle=\"Manage subscription plans and user subscriptions\"\n          >\n            <Button onClick={() => setIsCreateDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Plan\n            </Button>\n          </Header>\n\n          {/* Content */}\n          <div className=\"p-4 lg:p-6 space-y-6\">\n            <Tabs defaultValue=\"plans\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"plans\">Subscription Plans</TabsTrigger>\n          <TabsTrigger value=\"users\">User Subscriptions</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Subscription Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"plans\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {plansLoading ? (\n              Array.from({ length: 4 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              plans.map((plan) => (\n                <Card key={plan.id} className={plan.isActive ? \"\" : \"opacity-60\"}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          {plan.name}\n                          {!plan.isActive && <Badge variant=\"secondary\">Inactive</Badge>}\n                        </CardTitle>\n                        <CardDescription className=\"capitalize\">{plan.tier} tier</CardDescription>\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditPlan(plan)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeletePlan(plan.id)}\n                          disabled={deletePlanMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <p className=\"text-2xl font-bold\">{formatCurrency(plan.monthlyPrice)}</p>\n                        <p className=\"text-sm text-muted-foreground\">per month</p>\n                        {plan.yearlyPrice && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            {formatCurrency(plan.yearlyPrice)} per year\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium mb-2\">Features:</p>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {plan.features?.slice(0, 3).map((feature, index) => (\n                            <li key={index} className=\"flex items-center\">\n                              <span className=\"w-1 h-1 bg-primary rounded-full mr-2\"></span>\n                              {feature}\n                            </li>\n                          ))}\n                          {plan.features && plan.features.length > 3 && (\n                            <li className=\"text-xs\">+{plan.features.length - 3} more</li>\n                          )}\n                        </ul>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div>\n                          <p className=\"font-medium\">Signals</p>\n                          <p className=\"text-muted-foreground\">\n                            {plan.maxSignals === -1 ? \"Unlimited\" : plan.maxSignals}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">Tickers</p>\n                          <p className=\"text-muted-foreground\">\n                            {plan.maxTickers === -1 ? \"Unlimited\" : plan.maxTickers}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>User Subscriptions</CardTitle>\n              <CardDescription>Manage individual user subscriptions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {subscriptionsLoading ? (\n                <div className=\"space-y-2\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\"></div>\n                  ))}\n                </div>\n              ) : subscriptions.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <CreditCard className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No active subscriptions</p>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {subscriptions.map((subscription) => (\n                    <div key={subscription.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h4 className=\"font-medium\">{subscription.userName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{subscription.userEmail}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium\">{subscription.planName}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {formatCurrency(subscription.amount)} • Next payment: {new Date(subscription.nextPayment).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusBadge(subscription.status)}\n                        {subscription.status === \"active\" && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => cancelSubscriptionMutation.mutate(subscription.id)}\n                            disabled={cancelSubscriptionMutation.isPending}\n                          >\n                            Cancel\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Subscriptions</p>\n                    <p className=\"text-2xl font-bold\">\n                      {subscriptions.filter(s => s.status === \"active\").length}\n                    </p>\n                  </div>\n                  <Users className=\"h-8 w-8 text-muted-foreground\" />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">+5% from last month</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Monthly Revenue</p>\n                    <p className=\"text-2xl font-bold\">$12,450</p>\n                  </div>\n                  <DollarSign className=\"h-8 w-8 text-muted-foreground\" />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">+12% from last month</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Churn Rate</p>\n                    <p className=\"text-2xl font-bold\">2.3%</p>\n                  </div>\n                  <TrendingUp className=\"h-8 w-8 text-muted-foreground\" />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">-0.5% from last month</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Avg LTV</p>\n                    <p className=\"text-2xl font-bold\">$287</p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-muted-foreground\" />\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">+8% from last month</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n            {/* Edit Plan Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Subscription Plan</DialogTitle>\n            <DialogDescription>\n              Update the details of this subscription plan.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-name\">Plan Name</Label>\n              <Input\n                id=\"edit-name\"\n                value={selectedPlan?.name || \"\"}\n                onChange={(e) => setSelectedPlan(prev => prev ? { ...prev, name: e.target.value } : null)}\n                placeholder=\"Basic Plan\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-tier\">Tier</Label>\n              <Select \n                value={selectedPlan?.tier || \"\"} \n                onValueChange={(value) => setSelectedPlan(prev => prev ? { ...prev, tier: value } : null)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select tier\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"free\">Free</SelectItem>\n                  <SelectItem value=\"basic\">Basic</SelectItem>\n                  <SelectItem value=\"premium\">Premium</SelectItem>\n                  <SelectItem value=\"pro\">Pro</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-monthly-price\">Monthly Price ($)</Label>\n              <Input\n                id=\"edit-monthly-price\"\n                type=\"number\"\n                value={selectedPlan?.monthlyPrice ? selectedPlan.monthlyPrice / 100 : 0}\n                onChange={(e) => setSelectedPlan(prev => prev ? { ...prev, monthlyPrice: Number(e.target.value) * 100 } : null)}\n                placeholder=\"29.99\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-yearly-price\">Yearly Price ($, optional)</Label>\n              <Input\n                id=\"edit-yearly-price\"\n                type=\"number\"\n                value={selectedPlan?.yearlyPrice ? selectedPlan.yearlyPrice / 100 : 0}\n                onChange={(e) => setSelectedPlan(prev => prev ? { ...prev, yearlyPrice: Number(e.target.value) * 100 } : null)}\n                placeholder=\"299.99\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-max-signals\">Max Signals (0 = unlimited)</Label>\n              <Input\n                id=\"edit-max-signals\"\n                type=\"number\"\n                value={selectedPlan?.maxSignals === -1 ? 0 : selectedPlan?.maxSignals || 0}\n                onChange={(e) => setSelectedPlan(prev => prev ? { ...prev, maxSignals: Number(e.target.value) } : null)}\n                placeholder=\"100\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-max-tickers\">Max Tickers (0 = unlimited)</Label>\n              <Input\n                id=\"edit-max-tickers\"\n                type=\"number\"\n                value={selectedPlan?.maxTickers === -1 ? 0 : selectedPlan?.maxTickers || 0}\n                onChange={(e) => setSelectedPlan(prev => prev ? { ...prev, maxTickers: Number(e.target.value) } : null)}\n                placeholder=\"10\"\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Features</Label>\n            {selectedPlan?.features?.map((feature, index) => (\n              <div key={index} className=\"flex space-x-2\">\n                <Input\n                  value={feature}\n                  onChange={(e) => {\n                    if (selectedPlan) {\n                      const newFeatures = [...selectedPlan.features];\n                      newFeatures[index] = e.target.value;\n                      setSelectedPlan({ ...selectedPlan, features: newFeatures });\n                    }\n                  }}\n                  placeholder=\"Feature description\"\n                />\n                {selectedPlan.features.length > 1 && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => {\n                      if (selectedPlan) {\n                        const newFeatures = selectedPlan.features.filter((_, i) => i !== index);\n                        setSelectedPlan({ ...selectedPlan, features: newFeatures });\n                      }\n                    }}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))}\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => {\n                if (selectedPlan) {\n                  setSelectedPlan({ ...selectedPlan, features: [...selectedPlan.features, \"\"] });\n                }\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Feature\n            </Button>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleUpdatePlan} disabled={updatePlanMutation.isPending}>\n              {updatePlanMutation.isPending ? \"Updating...\" : \"Update Plan\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Plan Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create Subscription Plan</DialogTitle>\n            <DialogDescription>Add a new subscription plan to your platform</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"plan-name\">Plan Name</Label>\n              <Input\n                id=\"plan-name\"\n                value={newPlan.name}\n                onChange={(e) => setNewPlan(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"e.g., Pro Plan\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"plan-tier\">Tier</Label>\n              <Select value={newPlan.tier} onValueChange={(value) => setNewPlan(prev => ({ ...prev, tier: value }))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select tier\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"free\">Free</SelectItem>\n                  <SelectItem value=\"basic\">Basic</SelectItem>\n                  <SelectItem value=\"premium\">Premium</SelectItem>\n                  <SelectItem value=\"pro\">Pro</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"monthly-price\">Monthly Price ($)</Label>\n              <Input\n                id=\"monthly-price\"\n                type=\"number\"\n                value={newPlan.monthlyPrice}\n                onChange={(e) => setNewPlan(prev => ({ ...prev, monthlyPrice: Number(e.target.value) }))}\n                placeholder=\"29.99\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"yearly-price\">Yearly Price ($)</Label>\n              <Input\n                id=\"yearly-price\"\n                type=\"number\"\n                value={newPlan.yearlyPrice}\n                onChange={(e) => setNewPlan(prev => ({ ...prev, yearlyPrice: Number(e.target.value) }))}\n                placeholder=\"299.99\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"max-signals\">Max Signals (0 = unlimited)</Label>\n              <Input\n                id=\"max-signals\"\n                type=\"number\"\n                value={newPlan.maxSignals}\n                onChange={(e) => setNewPlan(prev => ({ ...prev, maxSignals: Number(e.target.value) }))}\n                placeholder=\"100\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"max-tickers\">Max Tickers (0 = unlimited)</Label>\n              <Input\n                id=\"max-tickers\"\n                type=\"number\"\n                value={newPlan.maxTickers}\n                onChange={(e) => setNewPlan(prev => ({ ...prev, maxTickers: Number(e.target.value) }))}\n                placeholder=\"10\"\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Features</Label>\n            {newPlan.features.map((feature, index) => (\n              <div key={index} className=\"flex space-x-2\">\n                <Input\n                  value={feature}\n                  onChange={(e) => updateFeature(index, e.target.value)}\n                  placeholder=\"Feature description\"\n                />\n                {newPlan.features.length > 1 && (\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => removeFeature(index)}>\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))}\n            <Button variant=\"outline\" size=\"sm\" onClick={addFeature}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Feature\n            </Button>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleCreatePlan} disabled={createPlanMutation.isPending}>\n              {createPlanMutation.isPending ? \"Creating...\" : \"Create Plan\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n}"],"names":["AdminSubscriptions","selectedPlan","setSelectedPlan","useState","isEditDialogOpen","setIsEditDialogOpen","isCreateDialogOpen","setIsCreateDialogOpen","newPlan","setNewPlan","toast","useToast","subscriptions","subscriptionsLoading","useQuery","plans","plansLoading","createPlanMutation","useMutation","planData","apiRequest","queryClient","error","updatePlanMutation","id","data","deletePlanMutation","planId","cancelSubscriptionMutation","subscriptionId","getStatusBadge","status","jsx","Badge","formatCurrency","amount","handleEditPlan","plan","handleUpdatePlan","f","handleDeletePlan","handleCreatePlan","updateFeature","index","value","features","prev","addFeature","removeFeature","_","i","jsxs","Sidebar","Header","Button","Plus","Tabs","TabsList","TabsTrigger","TabsContent","Card","CardHeader","CardContent","CardTitle","CardDescription","Edit","Trash2","_a","feature","CreditCard","subscription","Users","DollarSign","TrendingUp","Calendar","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label","Input","e","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","newFeatures","DialogFooter"],"mappings":"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"}