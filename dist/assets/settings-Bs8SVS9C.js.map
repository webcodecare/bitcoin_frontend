{"version":3,"file":"settings-Bs8SVS9C.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/eye-off.js","../../../node_modules/lucide-react/dist/esm/icons/palette.js","../../../node_modules/lucide-react/dist/esm/icons/upload.js","../../src/components/settings/ProfileSettings.tsx","../../src/components/settings/NotificationSettings.tsx","../../src/pages/settings.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst EyeOff = createLucideIcon(\"EyeOff\", [\n  [\n    \"path\",\n    {\n      d: \"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49\",\n      key: \"ct8e1f\"\n    }\n  ],\n  [\"path\", { d: \"M14.084 14.158a3 3 0 0 1-4.242-4.242\", key: \"151rxh\" }],\n  [\n    \"path\",\n    {\n      d: \"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143\",\n      key: \"13bj9a\"\n    }\n  ],\n  [\"path\", { d: \"m2 2 20 20\", key: \"1ooewy\" }]\n]);\n\nexport { EyeOff as default };\n//# sourceMappingURL=eye-off.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Palette = createLucideIcon(\"Palette\", [\n  [\"circle\", { cx: \"13.5\", cy: \"6.5\", r: \".5\", fill: \"currentColor\", key: \"1okk4w\" }],\n  [\"circle\", { cx: \"17.5\", cy: \"10.5\", r: \".5\", fill: \"currentColor\", key: \"f64h9f\" }],\n  [\"circle\", { cx: \"8.5\", cy: \"7.5\", r: \".5\", fill: \"currentColor\", key: \"fotxhn\" }],\n  [\"circle\", { cx: \"6.5\", cy: \"12.5\", r: \".5\", fill: \"currentColor\", key: \"qy21gx\" }],\n  [\n    \"path\",\n    {\n      d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z\",\n      key: \"12rzf8\"\n    }\n  ]\n]);\n\nexport { Palette as default };\n//# sourceMappingURL=palette.js.map\n","/**\n * @license lucide-react v0.453.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Upload = createLucideIcon(\"Upload\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"17 8 12 3 7 8\", key: \"t8dd8p\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"3\", y2: \"15\", key: \"widbto\" }]\n]);\n\nexport { Upload as default };\n//# sourceMappingURL=upload.js.map\n","import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { User, Upload, Shield, Eye, EyeOff } from 'lucide-react';\n\ninterface ProfileSettingsProps {\n  user: any;\n  onUpdate: (data: any) => Promise<void>;\n  isLoading?: boolean;\n}\n\nexport default function ProfileSettings({ user, onUpdate, isLoading }: ProfileSettingsProps) {\n  const { toast } = useToast();\n  const [showWebhookSecret, setShowWebhookSecret] = useState(false);\n  \n  const [profileData, setProfileData] = useState({\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n    bio: user?.bio || '',\n    company: user?.company || '',\n    website: user?.website || '',\n    location: user?.location || '',\n  });\n\n  const handleSave = async () => {\n    try {\n      await onUpdate(profileData);\n      toast({\n        title: 'Profile Updated',\n        description: 'Your profile information has been saved successfully.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Update Failed',\n        description: 'Failed to update profile. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Generate webhook secret\n  const generateWebhookSecret = () => {\n    const secret = crypto.randomUUID().replace(/-/g, '');\n    return secret;\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: 'Copied',\n      description: 'Webhook secret copied to clipboard',\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Profile Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Profile Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Avatar Section */}\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarImage src={user?.avatar} />\n              <AvatarFallback className=\"text-lg\">\n                {profileData.firstName?.[0]}{profileData.lastName?.[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <Button variant=\"outline\" size=\"sm\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Upload Photo\n              </Button>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                JPG, GIF or PNG. 1MB max.\n              </p>\n            </div>\n          </div>\n\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                value={profileData.firstName}\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\n                placeholder=\"Enter your first name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                value={profileData.lastName}\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\n                placeholder=\"Enter your last name\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={profileData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              placeholder=\"Enter your email\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"bio\">Bio</Label>\n            <Textarea\n              id=\"bio\"\n              value={profileData.bio}\n              onChange={(e) => handleInputChange('bio', e.target.value)}\n              placeholder=\"Tell us about yourself\"\n              className=\"min-h-[100px]\"\n            />\n          </div>\n\n          {/* Additional Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input\n                id=\"company\"\n                value={profileData.company}\n                onChange={(e) => handleInputChange('company', e.target.value)}\n                placeholder=\"Your company name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"website\">Website</Label>\n              <Input\n                id=\"website\"\n                type=\"url\"\n                value={profileData.website}\n                onChange={(e) => handleInputChange('website', e.target.value)}\n                placeholder=\"https://yourwebsite.com\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"location\">Location</Label>\n            <Input\n              id=\"location\"\n              value={profileData.location}\n              onChange={(e) => handleInputChange('location', e.target.value)}\n              placeholder=\"City, Country\"\n            />\n          </div>\n\n          <Button onClick={handleSave} disabled={isLoading}>\n            Save Profile Changes\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Account Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Account Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Account Type</p>\n              <p className=\"text-sm text-muted-foreground\">Your current subscription plan</p>\n            </div>\n            <Badge variant={user?.subscriptionTier === 'premium' ? 'default' : 'secondary'}>\n              {user?.subscriptionTier || 'Free'}\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Account Status</p>\n              <p className=\"text-sm text-muted-foreground\">Verification and security status</p>\n            </div>\n            <Badge variant={user?.emailVerified ? 'default' : 'destructive'}>\n              {user?.emailVerified ? 'Verified' : 'Unverified'}\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Member Since</p>\n              <p className=\"text-sm text-muted-foreground\">Account creation date</p>\n            </div>\n            <span className=\"text-sm\">\n              {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Webhook Secret Display */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Webhook Secret\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Your Webhook Secret</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Use this secret for TradingView webhook authentication\n              </p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowWebhookSecret(!showWebhookSecret)}\n            >\n              {showWebhookSecret ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n\n          {showWebhookSecret && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  value={user?.webhookSecret || generateWebhookSecret()}\n                  readOnly\n                  className=\"font-mono text-sm\"\n                />\n                <Button\n                  variant=\"outline\"\n                  onClick={() => copyToClipboard(user?.webhookSecret || generateWebhookSecret())}\n                >\n                  Copy\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Keep this secret secure. Include it in your TradingView webhook messages.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Bell, \n  Mail, \n  Phone, \n  MessageSquare,\n  Smartphone,\n  CheckCircle,\n  XCircle,\n  Volume2\n} from 'lucide-react';\n\ninterface NotificationSettingsProps {\n  settings: any;\n  onUpdate: (data: any) => Promise<void>;\n  isLoading?: boolean;\n}\n\nexport default function NotificationSettings({ settings, onUpdate, isLoading }: NotificationSettingsProps) {\n  const { toast } = useToast();\n  const [pushSupported, setPushSupported] = useState(false);\n  const [pushPermission, setPushPermission] = useState<NotificationPermission>('default');\n  \n  const [notificationData, setNotificationData] = useState({\n    // Channel toggles\n    notificationEmail: settings?.notificationEmail ?? true,\n    notificationSms: settings?.notificationSms ?? false,\n    notificationPush: settings?.notificationPush ?? true,\n    notificationTelegram: settings?.notificationTelegram ?? false,\n    \n    // Contact information\n    emailAddress: settings?.emailAddress || '',\n    phoneNumber: settings?.phoneNumber || '',\n    telegramChatId: settings?.telegramChatId || '',\n    \n    // Alert type preferences\n    priceAlerts: settings?.priceAlerts ?? true,\n    volumeAlerts: settings?.volumeAlerts ?? false,\n    newsAlerts: settings?.newsAlerts ?? true,\n    technicalAlerts: settings?.technicalAlerts ?? true,\n    whaleAlerts: settings?.whaleAlerts ?? false,\n    \n    // Push settings\n    pushEnabled: settings?.pushEnabled ?? false,\n  });\n\n  // Check push notification support\n  useEffect(() => {\n    if ('Notification' in window && 'serviceWorker' in navigator) {\n      setPushSupported(true);\n      setPushPermission(Notification.permission);\n    }\n  }, []);\n\n  const handleSave = async () => {\n    try {\n      await onUpdate(notificationData);\n      toast({\n        title: 'Notification Settings Updated',\n        description: 'Your notification preferences have been saved.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Update Failed',\n        description: 'Failed to update notification settings.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleToggle = (field: string, value: boolean) => {\n    setNotificationData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setNotificationData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Request push notification permission\n  const requestPushPermission = async () => {\n    if (!pushSupported) {\n      toast({\n        title: 'Not Supported',\n        description: 'Push notifications are not supported in this browser.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      setPushPermission(permission);\n      \n      if (permission === 'granted') {\n        // Register service worker and get push subscription\n        const registration = await navigator.serviceWorker.register('/sw.js');\n        const subscription = await registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: 'your-vapid-public-key' // Replace with actual VAPID key\n        });\n        \n        handleToggle('pushEnabled', true);\n        await onUpdate({ \n          ...notificationData, \n          pushEnabled: true,\n          pushSubscription: JSON.stringify(subscription)\n        });\n        \n        toast({\n          title: 'Push Notifications Enabled',\n          description: 'You will now receive push notifications.',\n        });\n      } else {\n        toast({\n          title: 'Permission Denied',\n          description: 'Push notifications permission was denied.',\n          variant: 'destructive',\n        });\n      }\n    } catch (error) {\n      toast({\n        title: 'Registration Failed',\n        description: 'Failed to register for push notifications.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Send test notification\n  const sendTestNotification = (channel: string) => {\n    toast({\n      title: `Test ${channel} Notification`,\n      description: `This is a test notification for ${channel.toLowerCase()}.`,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Notification Channels */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Notification Channels\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Email Notifications */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"h-5 w-5 text-blue-500\" />\n                <div>\n                  <p className=\"font-medium\">Email Notifications</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive trading signals and updates via email\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={notificationData.notificationEmail}\n                  onCheckedChange={(checked) => handleToggle('notificationEmail', checked)}\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => sendTestNotification('Email')}\n                  disabled={!notificationData.notificationEmail}\n                >\n                  Test\n                </Button>\n              </div>\n            </div>\n            \n            {notificationData.notificationEmail && (\n              <div>\n                <Label htmlFor=\"emailAddress\">Email Address</Label>\n                <Input\n                  id=\"emailAddress\"\n                  type=\"email\"\n                  value={notificationData.emailAddress}\n                  onChange={(e) => handleInputChange('emailAddress', e.target.value)}\n                  placeholder=\"your.email@example.com\"\n                  className=\"mt-1\"\n                />\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* SMS Notifications */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <p className=\"font-medium\">SMS Notifications</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get instant alerts via text message\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={notificationData.notificationSms}\n                  onCheckedChange={(checked) => handleToggle('notificationSms', checked)}\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => sendTestNotification('SMS')}\n                  disabled={!notificationData.notificationSms}\n                >\n                  Test\n                </Button>\n              </div>\n            </div>\n            \n            {notificationData.notificationSms && (\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  type=\"tel\"\n                  value={notificationData.phoneNumber}\n                  onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                  placeholder=\"+1 (555) 123-4567\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Include country code (e.g., +1 for US)\n                </p>\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Push Notifications */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Smartphone className=\"h-5 w-5 text-purple-500\" />\n                <div>\n                  <p className=\"font-medium\">Push Notifications</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Browser notifications when page is not active\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {pushPermission === 'granted' ? (\n                  <Badge variant=\"default\" className=\"text-xs\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Enabled\n                  </Badge>\n                ) : pushPermission === 'denied' ? (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    <XCircle className=\"h-3 w-3 mr-1\" />\n                    Blocked\n                  </Badge>\n                ) : (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={requestPushPermission}\n                    disabled={!pushSupported}\n                  >\n                    Enable\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            {pushPermission === 'granted' && (\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={notificationData.pushEnabled}\n                  onCheckedChange={(checked) => handleToggle('pushEnabled', checked)}\n                />\n                <span className=\"text-sm\">Receive push notifications</span>\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Telegram Notifications */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <MessageSquare className=\"h-5 w-5 text-cyan-500\" />\n                <div>\n                  <p className=\"font-medium\">Telegram Notifications</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Receive alerts via Telegram bot\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Switch\n                  checked={notificationData.notificationTelegram}\n                  onCheckedChange={(checked) => handleToggle('notificationTelegram', checked)}\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => sendTestNotification('Telegram')}\n                  disabled={!notificationData.notificationTelegram}\n                >\n                  Test\n                </Button>\n              </div>\n            </div>\n            \n            {notificationData.notificationTelegram && (\n              <div>\n                <Label htmlFor=\"telegramChatId\">Telegram Chat ID</Label>\n                <Input\n                  id=\"telegramChatId\"\n                  value={notificationData.telegramChatId}\n                  onChange={(e) => handleInputChange('telegramChatId', e.target.value)}\n                  placeholder=\"123456789\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Message @cryptostrategy_bot to get your Chat ID\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Alert Type Preferences */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Volume2 className=\"h-5 w-5\" />\n            Alert Types\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Price Alerts</p>\n                <p className=\"text-sm text-muted-foreground\">Buy/sell signals</p>\n              </div>\n              <Switch\n                checked={notificationData.priceAlerts}\n                onCheckedChange={(checked) => handleToggle('priceAlerts', checked)}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Volume Alerts</p>\n                <p className=\"text-sm text-muted-foreground\">High volume movements</p>\n              </div>\n              <Switch\n                checked={notificationData.volumeAlerts}\n                onCheckedChange={(checked) => handleToggle('volumeAlerts', checked)}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">News Alerts</p>\n                <p className=\"text-sm text-muted-foreground\">Market news updates</p>\n              </div>\n              <Switch\n                checked={notificationData.newsAlerts}\n                onCheckedChange={(checked) => handleToggle('newsAlerts', checked)}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Technical Alerts</p>\n                <p className=\"text-sm text-muted-foreground\">RSI, MACD indicators</p>\n              </div>\n              <Switch\n                checked={notificationData.technicalAlerts}\n                onCheckedChange={(checked) => handleToggle('technicalAlerts', checked)}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Whale Alerts</p>\n                <p className=\"text-sm text-muted-foreground\">Large transactions</p>\n              </div>\n              <Switch\n                checked={notificationData.whaleAlerts}\n                onCheckedChange={(checked) => handleToggle('whaleAlerts', checked)}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Button onClick={handleSave} disabled={isLoading} className=\"w-full\">\n        Save Notification Settings\n      </Button>\n    </div>\n  );\n}","import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport ProfileSettings from \"@/components/settings/ProfileSettings\";\nimport NotificationSettings from \"@/components/settings/NotificationSettings\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { tokenStorage } from \"@/lib/auth\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  User, \n  Shield, \n  Palette, \n  Bell,\n  Key,\n  Trash2,\n  Settings as SettingsIcon\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const token = tokenStorage.get();\n\n  // Fetch user settings\n  const { data: settings, isLoading: settingsLoading } = useQuery({\n    queryKey: [\"/api/user/settings\", token],\n    queryFn: async () => {\n      if (!token) throw new Error(\"No authentication token\");\n      const response = await fetch(\"/api/user/settings\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n    enabled: !!token,\n  });\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      if (!token) throw new Error(\"No authentication token\");\n      const response = await fetch(\"/api/user/settings\", {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your settings have been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\", token] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error?.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  const handleUpdateProfile = async (data: any) => {\n    return updateSettingsMutation.mutateAsync(data);\n  };\n\n  const handleUpdateNotifications = async (data: any) => {\n    return updateSettingsMutation.mutateAsync(data);\n  };\n\n  const handlePasswordChange = async () => {\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // In a real app, you'd make an API call to change password\n    toast({\n      title: \"Password changed\",\n      description: \"Your password has been updated successfully\",\n    });\n    setPasswordData({ currentPassword: \"\", newPassword: \"\", confirmPassword: \"\" });\n  };\n\n  const handleDeleteAccount = async () => {\n    // In a real app, you'd make an API call to delete the account\n    toast({\n      title: \"Account deletion requested\",\n      description: \"Your account will be deleted within 24 hours\",\n    });\n    setIsDeleteDialogOpen(false);\n    logout();\n  };\n\n  if (settingsLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <SettingsIcon className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n            <p>Loading settings...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden ml-0 md:ml-64\">\n        {/* Header */}\n        <header className=\"border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n          <div className=\"flex h-12 sm:h-14 items-center px-3 sm:px-6\">\n            <h1 className=\"text-lg sm:text-xl font-semibold\">Settings & Preferences</h1>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"flex-1 overflow-auto p-3 sm:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <Tabs defaultValue=\"profile\" className=\"space-y-4 sm:space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4 text-xs sm:text-sm\">\n                <TabsTrigger value=\"profile\" className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-4\">\n                  <User className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"hidden sm:inline\">Profile</span>\n                  <span className=\"sm:hidden\">👤</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n                  <Bell className=\"h-4 w-4\" />\n                  Notifications\n                </TabsTrigger>\n                <TabsTrigger value=\"appearance\" className=\"flex items-center gap-2\">\n                  <Palette className=\"h-4 w-4\" />\n                  Appearance\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n                  <Shield className=\"h-4 w-4\" />\n                  Security\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"profile\" className=\"space-y-6\">\n                <ProfileSettings\n                  user={user}\n                  onUpdate={handleUpdateProfile}\n                  isLoading={updateSettingsMutation.isPending}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"notifications\" className=\"space-y-6\">\n                <NotificationSettings\n                  settings={settings}\n                  onUpdate={handleUpdateNotifications}\n                  isLoading={updateSettingsMutation.isPending}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"appearance\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Palette className=\"h-5 w-5\" />\n                      Appearance Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"theme-select\">Theme</Label>\n                        <Select \n                          value={settings?.theme || \"dark\"} \n                          onValueChange={(value) => updateSettingsMutation.mutate({ theme: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select theme\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"light\">🌞 Light</SelectItem>\n                            <SelectItem value=\"dark\">🌙 Dark</SelectItem>\n                            <SelectItem value=\"auto\">🔄 Auto</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"language-select\">Language</Label>\n                        <Select \n                          value={settings?.language || \"en\"} \n                          onValueChange={(value) => updateSettingsMutation.mutate({ language: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select language\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"en\">🇺🇸 English</SelectItem>\n                            <SelectItem value=\"es\">🇪🇸 Español</SelectItem>\n                            <SelectItem value=\"fr\">🇫🇷 Français</SelectItem>\n                            <SelectItem value=\"de\">🇩🇪 Deutsch</SelectItem>\n                            <SelectItem value=\"zh\">🇨🇳 中文</SelectItem>\n                            <SelectItem value=\"ja\">🇯🇵 日本語</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"currency-select\">Currency</Label>\n                        <Select \n                          value={settings?.currency || \"USD\"} \n                          onValueChange={(value) => updateSettingsMutation.mutate({ currency: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select currency\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"USD\">💵 USD</SelectItem>\n                            <SelectItem value=\"EUR\">💶 EUR</SelectItem>\n                            <SelectItem value=\"GBP\">💷 GBP</SelectItem>\n                            <SelectItem value=\"JPY\">💴 JPY</SelectItem>\n                            <SelectItem value=\"CAD\">🍁 CAD</SelectItem>\n                            <SelectItem value=\"AUD\">🇦🇺 AUD</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"timezone-select\">Timezone</Label>\n                        <Select \n                          value={settings?.timezone || \"UTC\"} \n                          onValueChange={(value) => updateSettingsMutation.mutate({ timezone: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select timezone\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"UTC\">🌍 UTC</SelectItem>\n                            <SelectItem value=\"America/New_York\">🗽 New York</SelectItem>\n                            <SelectItem value=\"America/Los_Angeles\">🌴 Los Angeles</SelectItem>\n                            <SelectItem value=\"Europe/London\">🇬🇧 London</SelectItem>\n                            <SelectItem value=\"Europe/Paris\">🇫🇷 Paris</SelectItem>\n                            <SelectItem value=\"Asia/Tokyo\">🇯🇵 Tokyo</SelectItem>\n                            <SelectItem value=\"Asia/Shanghai\">🇨🇳 Shanghai</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"pt-4 border-t\">\n                      <Button \n                        onClick={() => toast({ title: \"Settings Applied\", description: \"Your appearance preferences have been saved.\" })}\n                        className=\"w-full md:w-auto\"\n                      >\n                        Apply Changes\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"security\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Shield className=\"h-5 w-5\" />\n                      Security Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"currentPassword\">Current Password</Label>\n                      <Input\n                        id=\"currentPassword\"\n                        type=\"password\"\n                        value={passwordData.currentPassword}\n                        onChange={(e) =>\n                          setPasswordData({ ...passwordData, currentPassword: e.target.value })\n                        }\n                        placeholder=\"Enter current password\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"newPassword\">New Password</Label>\n                      <Input\n                        id=\"newPassword\"\n                        type=\"password\"\n                        value={passwordData.newPassword}\n                        onChange={(e) =>\n                          setPasswordData({ ...passwordData, newPassword: e.target.value })\n                        }\n                        placeholder=\"Enter new password\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        type=\"password\"\n                        value={passwordData.confirmPassword}\n                        onChange={(e) =>\n                          setPasswordData({ ...passwordData, confirmPassword: e.target.value })\n                        }\n                        placeholder=\"Confirm new password\"\n                      />\n                    </div>\n                    <Button onClick={handlePasswordChange} variant=\"outline\">\n                      <Key className=\"mr-2 h-4 w-4\" />\n                      Change Password\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Danger Zone */}\n                <Card className=\"border-destructive\">\n                  <CardHeader>\n                    <CardTitle className=\"text-destructive\">Danger Zone</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-medium\">Delete Account</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Permanently delete your account and all associated data\n                        </p>\n                      </div>\n                      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button variant=\"destructive\">\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Account\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Are you absolutely sure?</DialogTitle>\n                            <DialogDescription>\n                              This action cannot be undone. This will permanently delete your\n                              account and remove your data from our servers.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <DialogFooter>\n                            <Button variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)}>\n                              Cancel\n                            </Button>\n                            <Button variant=\"destructive\" onClick={handleDeleteAccount}>\n                              Yes, delete my account\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}"],"names":["EyeOff","createLucideIcon","Palette","Upload","ProfileSettings","user","onUpdate","isLoading","toast","useToast","showWebhookSecret","setShowWebhookSecret","useState","profileData","setProfileData","handleSave","handleInputChange","field","value","prev","generateWebhookSecret","copyToClipboard","text","jsxs","Card","jsx","CardHeader","CardTitle","User","CardContent","Avatar","AvatarImage","AvatarFallback","_a","_b","Button","Label","Input","e","Textarea","Shield","Badge","Eye","NotificationSettings","settings","pushSupported","setPushSupported","pushPermission","setPushPermission","notificationData","setNotificationData","useEffect","handleToggle","requestPushPermission","permission","subscription","sendTestNotification","channel","Bell","Mail","Switch","checked","Separator","Phone","Smartphone","CheckCircle","XCircle","MessageSquare","Volume2","Settings","logout","useAuth","queryClient","useQueryClient","isDeleteDialogOpen","setIsDeleteDialogOpen","token","tokenStorage","settingsLoading","useQuery","response","updateSettingsMutation","useMutation","updates","error","passwordData","setPasswordData","handleUpdateProfile","data","handleUpdateNotifications","handlePasswordChange","handleDeleteAccount","Sidebar","SettingsIcon","Tabs","TabsList","TabsTrigger","TabsContent","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Key","Dialog","DialogTrigger","Trash2","DialogContent","DialogHeader","DialogTitle","DialogDescription","DialogFooter"],"mappings":"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","x_google_ignoreList":[0,1,2]}