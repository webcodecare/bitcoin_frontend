{"version":3,"mappings":"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","names":["HeatmapChart","lazy","__vitePreload","CycleChart","AdvancedForecastChart","n","MultiTickerDashboard","useAuth","recentSignals","setRecentSignals","useState","selectedTickers","setSelectedTickers","selectedChart","setSelectedChart","handleTickerToggle","symbol","prev","s","publicSignals","isLoadingSignals","useQuery","useEffect","quickStats","BarChart3","Clock","Activity","Bell","jsxs","jsx","Sidebar","Badge","Button","Tabs","TabsList","TabsTrigger","LineChart","PieChart","TrendingUp","TabsContent","stat","index","Card","CardContent","CardHeader","CardTitle","ticker","_","i","signal","availableTickers","isLoadingTickers","Target","priceData","priceLoading","_a","_b","_c","SubscriptionGuard"],"ignoreList":[],"sources":["../../src/pages/multi-ticker-dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport SubscriptionGuard from \"@/components/auth/SubscriptionGuard\";\n\n// Lazy load existing charts\nconst HeatmapChart = lazy(() => import(\"@/components/charts/HeatmapChart\"));\nconst CycleChart = lazy(() => import(\"@/components/charts/CycleChart\"));\nconst AdvancedForecastChart = lazy(() => import(\"@/components/charts/AdvancedForecastChart\"));\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Activity,\n  Bell,\n  BarChart3,\n  LineChart,\n  PieChart,\n  Target,\n  Clock\n} from \"lucide-react\";\n\ninterface AlertSignal {\n  id: string;\n  ticker: string;\n  signalType: \"buy\" | \"sell\";\n  price: string;\n  timestamp: string;\n  source: string;\n  note?: string;\n}\n\nexport default function MultiTickerDashboard() {\n  const { user } = useAuth();\n  const [recentSignals, setRecentSignals] = useState<AlertSignal[]>([]);\n  const [selectedTickers, setSelectedTickers] = useState<string[]>([\"BTCUSDT\", \"ETHUSDT\"]);\n  const [selectedChart, setSelectedChart] = useState<string>(\"BTCUSDT\");\n\n  // Handle ticker selection\n  const handleTickerToggle = (symbol: string) => {\n    setSelectedTickers(prev => \n      prev.includes(symbol) \n        ? prev.filter(s => s !== symbol)\n        : [...prev, symbol]\n    );\n  };\n\n  // Fetch public signals (no user-specific data)\n  const { data: publicSignals, isLoading: isLoadingSignals } = useQuery({\n    queryKey: [\"/api/public/signals\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // WebSocket for real-time updates (placeholder for now)\n  // const { isConnected } = useWebSocket();\n\n  // Update signals from public API\n  useEffect(() => {\n    if (publicSignals) {\n      setRecentSignals(publicSignals);\n    }\n  }, [publicSignals]);\n\n  // Update signals when userSignals change\n  useEffect(() => {\n    // For now, populate with mock signals for demo\n    // Real signals will come from API\n  }, []);\n\n  const quickStats = [\n    {\n      title: \"Live Tickers\",\n      value: selectedTickers.length.toString(),\n      icon: BarChart3,\n      color: \"text-[var(--steel-blue)]\",\n    },\n    {\n      title: \"Last Signal\",\n      value: \"2h ago\",\n      icon: Clock,\n      color: \"text-foreground\",\n    },\n    {\n      title: \"Market Status\",\n      value: \"LIVE\",\n      icon: Activity,\n      color: \"text-[var(--chart-prime-orange)]\",\n    },\n    {\n      title: \"Signal Sources\",\n      value: \"TradingView\",\n      icon: Bell,\n      color: \"text-foreground\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar />\n        \n        {/* Main Content */}\n        <div className=\"ml-64 flex-1\">\n          {/* Top Bar */}\n          <header className=\"bg-card border-b border-border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold\">Multi-Ticker Dashboard</h1>\n                <p className=\"text-muted-foreground mt-1\">\n                  Tracking {selectedTickers.length} cryptocurrencies with live TradingView signals\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Badge variant=\"outline\" className=\"px-3 py-1\">\n                  <Activity className=\"mr-2 h-4 w-4\" />\n                  Live Data\n                </Badge>\n                <Button variant=\"outline\">\n                  <Bell className=\"mr-2 h-4 w-4\" />\n                  Alerts ({recentSignals.length})\n                </Button>\n              </div>\n            </div>\n          </header>\n\n          {/* Dashboard Content */}\n          <div className=\"p-6 space-y-6\">\n            <Tabs defaultValue=\"overview\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"h-4 w-4\" />\n                  <span>Overview</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"charts\" className=\"flex items-center space-x-2\">\n                  <LineChart className=\"h-4 w-4\" />\n                  <span>Charts</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n                  <PieChart className=\"h-4 w-4\" />\n                  <span>Analytics</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"categories\" className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  <span>Categories</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"signals\" className=\"flex items-center space-x-2\">\n                  <Bell className=\"h-4 w-4\" />\n                  <span>Signals</span>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                {/* Quick Stats */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  {quickStats.map((stat, index) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-sm font-medium text-muted-foreground\">\n                              {stat.title}\n                            </p>\n                            <p className={`text-2xl font-bold ${stat.color}`}>\n                              {stat.value}\n                            </p>\n                          </div>\n                          <stat.icon className={`h-8 w-8 ${stat.color}`} />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {/* Ticker Selector */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Your Cryptocurrency Watchlist</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                      {[\"BTCUSDT\", \"ETHUSDT\", \"ADAUSDT\", \"BNBUSDT\", \"DOTUSDT\", \"SOLUSDT\"].map((ticker) => (\n                        <Button\n                          key={ticker}\n                          variant={selectedTickers.includes(ticker) ? \"default\" : \"outline\"}\n                          onClick={() => handleTickerToggle(ticker)}\n                          className=\"justify-start\"\n                        >\n                          {ticker.replace(\"USDT\", \"\")}\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Signals Overview */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Signals</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {isLoadingSignals ? (\n                        <div className=\"space-y-2\">\n                          {[...Array(5)].map((_, i) => (\n                            <div key={i} className=\"h-12 bg-gray-200 rounded animate-pulse\"></div>\n                          ))}\n                        </div>\n                      ) : recentSignals.length === 0 ? (\n                        <p className=\"text-muted-foreground text-center py-8\">\n                          No signals yet. Your trading signals will appear here.\n                        </p>\n                      ) : (\n                        recentSignals.slice(0, 5).map((signal) => (\n                          <div key={signal.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Badge variant={signal.signalType === \"buy\" ? \"default\" : \"destructive\"}>\n                                {signal.signalType.toUpperCase()}\n                              </Badge>\n                              <div>\n                                <p className=\"font-medium\">{signal.ticker}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  ${signal.price} • {new Date(signal.timestamp).toLocaleTimeString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"text-sm text-muted-foreground\">{signal.source}</p>\n                              {signal.note && (\n                                <p className=\"text-xs text-muted-foreground\">{signal.note}</p>\n                              )}\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"categories\" className=\"space-y-6\">\n                {/* Enhanced Multi-Ticker Category Management */}\n                <div className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <h2 className=\"text-2xl font-bold mb-2\">Cryptocurrency Categories</h2>\n                    <p className=\"text-muted-foreground\">\n                      Explore beyond Bitcoin with 25+ cryptocurrencies organized by category\n                    </p>\n                  </div>\n\n                  {/* Available Tickers Query */}\n                  {(() => {\n                    const { data: availableTickers = [], isLoading: isLoadingTickers } = useQuery({\n                      queryKey: [\"/api/tickers/enabled\"],\n                    });\n\n                    if (isLoadingTickers) {\n                      return (\n                        <div className=\"flex items-center justify-center h-64\">\n                          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n                        </div>\n                      );\n                    }\n\n                    return (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Major Cryptos</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            {[\"BTCUSDT\", \"ETHUSDT\", \"BNBUSDT\"].map((ticker) => (\n                              <Button\n                                key={ticker}\n                                variant={selectedTickers.includes(ticker) ? \"default\" : \"outline\"}\n                                onClick={() => handleTickerToggle(ticker)}\n                                className=\"w-full justify-start\"\n                              >\n                                {ticker.replace(\"USDT\", \"\")}\n                              </Button>\n                            ))}\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>DeFi Tokens</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            {[\"ADAUSDT\", \"DOTUSDT\", \"LINKUSDT\"].map((ticker) => (\n                              <Button\n                                key={ticker}\n                                variant={selectedTickers.includes(ticker) ? \"default\" : \"outline\"}\n                                onClick={() => handleTickerToggle(ticker)}\n                                className=\"w-full justify-start\"\n                              >\n                                {ticker.replace(\"USDT\", \"\")}\n                              </Button>\n                            ))}\n                          </CardContent>\n                        </Card>\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Layer 1</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-2\">\n                            {[\"SOLUSDT\", \"AVAXUSDT\", \"MATICUSDT\"].map((ticker) => (\n                              <Button\n                                key={ticker}\n                                variant={selectedTickers.includes(ticker) ? \"default\" : \"outline\"}\n                                onClick={() => handleTickerToggle(ticker)}\n                                className=\"w-full justify-start\"\n                              >\n                                {ticker.replace(\"USDT\", \"\")}\n                              </Button>\n                            ))}\n                          </CardContent>\n                        </Card>\n                      </div>\n                    );\n                  })()}\n\n                  {/* Current Selection Summary */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Target className=\"h-5 w-5\" />\n                        Current Watchlist ({selectedTickers.length}/10)\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex flex-wrap gap-2\">\n                          {selectedTickers.map((ticker) => (\n                            <Badge \n                              key={ticker} \n                              variant=\"default\" \n                              className=\"flex items-center gap-2 px-3 py-1\"\n                            >\n                              <span>{ticker.replace('USDT', '')}</span>\n                              <button\n                                onClick={() => handleTickerToggle(ticker)}\n                                className=\"hover:bg-white/20 rounded-full p-0.5\"\n                              >\n                                ✕\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                        \n                        {selectedTickers.length === 0 && (\n                          <p className=\"text-muted-foreground text-center py-8\">\n                            Select cryptocurrencies from the categories above to start tracking\n                          </p>\n                        )}\n                        \n                        {selectedTickers.length > 0 && (\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\n                            {/* Mock market data display for selected tickers */}\n                            {selectedTickers.slice(0, 6).map((ticker, index) => (\n                              <Card key={ticker} className=\"p-4\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"font-bold\">{ticker.replace('USDT', '')}</span>\n                                  <Badge variant={index % 2 === 0 ? \"default\" : \"destructive\"}>\n                                    {index % 2 === 0 ? '+' : '-'}{(Math.random() * 10).toFixed(2)}%\n                                  </Badge>\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  ${(Math.random() * 100000).toLocaleString(undefined, {minimumFractionDigits: 2})}\n                                </div>\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  Vol: ${(Math.random() * 1000000000).toLocaleString(undefined, {notation: 'compact'})}\n                                </div>\n                              </Card>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"charts\" className=\"space-y-6\">\n                {/* Chart Selector */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Select Chart to Display</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedTickers.map((ticker) => (\n                        <Button\n                          key={ticker}\n                          variant={selectedChart === ticker ? \"default\" : \"outline\"}\n                          onClick={() => setSelectedChart(ticker)}\n                        >\n                          {ticker.replace('USDT', '')}\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Live Market Data Chart */}\n                {selectedChart && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Live Market Data - {selectedChart.replace('USDT', '')}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {(() => {\n                          const { data: priceData, isLoading: priceLoading } = useQuery({\n                            queryKey: [`/api/public/market/price/${selectedChart}`],\n                            refetchInterval: 10000, // Refresh every 10 seconds\n                          });\n\n                          if (priceLoading) {\n                            return (\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                                {[...Array(4)].map((_, i) => (\n                                  <div key={i} className=\"text-center p-4 border rounded\">\n                                    <div className=\"h-8 bg-gray-200 rounded animate-pulse mb-2\"></div>\n                                    <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                                  </div>\n                                ))}\n                              </div>\n                            );\n                          }\n\n                          return (\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                              <div className=\"text-center p-4 border rounded\">\n                                <div className=\"text-2xl font-bold text-[var(--steel-blue)]\">\n                                  ${priceData?.price?.toLocaleString(undefined, {minimumFractionDigits: 2}) || 'N/A'}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">Current Price</div>\n                              </div>\n                              <div className=\"text-center p-4 border rounded\">\n                                <div className={`text-2xl font-bold ${\n                                  (priceData?.priceChangePercent || 0) >= 0 \n                                    ? 'text-green-600' \n                                    : 'text-red-600'\n                                }`}>\n                                  {priceData?.priceChangePercent?.toFixed(2) || '0.00'}%\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">24h Change</div>\n                              </div>\n                              <div className=\"text-center p-4 border rounded\">\n                                <div className=\"text-2xl font-bold\">\n                                  ${priceData?.volume?.toLocaleString(undefined, {notation: 'compact'}) || 'N/A'}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">24h Volume</div>\n                              </div>\n                              <div className=\"text-center p-4 border rounded\">\n                                <div className=\"text-2xl font-bold\">\n                                  ${((priceData?.price || 0) * (priceData?.volume || 0) / 1000000).toLocaleString(undefined, {notation: 'compact'})}M\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">Market Cap (Est)</div>\n                              </div>\n                            </div>\n                          );\n                        })()}\n                        <div className=\"text-sm text-muted-foreground text-center\">\n                          Raw trading signals from TradingView will appear here across all timeframes (30min, 1hour, 4hour, 8hour, 12hour, day, week, month)\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-6\">\n                <div className=\"space-y-6\">\n                  {/* Advanced Cycle Forecasting */}\n                  <SubscriptionGuard feature=\"cycleForecasting\">\n                    {selectedChart && (\n                      <AdvancedForecastChart ticker={selectedChart} />\n                    )}\n                  </SubscriptionGuard>\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {/* Heatmap */}\n                    <SubscriptionGuard feature=\"heatmapAnalysis\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>200-Week SMA Heatmap</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <HeatmapChart />\n                        </CardContent>\n                      </Card>\n                    </SubscriptionGuard>\n\n                    {/* Cycle Analysis */}\n                    <SubscriptionGuard feature=\"advancedAnalytics\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>Cycle Analysis</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <CycleChart />\n                        </CardContent>\n                      </Card>\n                    </SubscriptionGuard>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"signals\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>All Trading Signals</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {isLoadingSignals ? (\n                        <div className=\"space-y-2\">\n                          {[...Array(10)].map((_, i) => (\n                            <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\"></div>\n                          ))}\n                        </div>\n                      ) : recentSignals.length === 0 ? (\n                        <p className=\"text-muted-foreground text-center py-8\">\n                          No signals yet. Your trading signals will appear here.\n                        </p>\n                      ) : (\n                        recentSignals.map((signal) => (\n                          <div key={signal.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center space-x-4\">\n                              <Badge variant={signal.signalType === \"buy\" ? \"default\" : \"destructive\"}>\n                                {signal.signalType.toUpperCase()}\n                              </Badge>\n                              <div>\n                                <p className=\"font-medium text-lg\">{signal.ticker}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Price: ${signal.price}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"text-sm font-medium\">{signal.source}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(signal.timestamp).toLocaleString()}\n                              </p>\n                              {signal.note && (\n                                <p className=\"text-xs text-muted-foreground mt-1\">{signal.note}</p>\n                              )}\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"file":"assets/multi-ticker-dashboard-DQdsS9Oy.js"}