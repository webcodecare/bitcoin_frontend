{"version":3,"file":"TradingViewWidget-qgry-KvN.js","sources":["../../src/components/charts/TradingViewWidget.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, Activity, DollarSign } from \"lucide-react\";\n\ninterface TradingViewWidgetProps {\n  symbol?: string;\n  theme?: 'light' | 'dark';\n  height?: number;\n  enableTrading?: boolean;\n  showSignals?: boolean;\n}\n\ninterface Signal {\n  id: string;\n  ticker: string;\n  type: 'buy' | 'sell';\n  price: string;\n  timestamp: string;\n  notes?: string;\n}\n\ninterface MarketData {\n  symbol: string;\n  price: number;\n  change24h?: number;\n  volume24h?: number;\n  high24h?: number;\n  low24h?: number;\n}\n\nexport default function TradingViewWidget({ \n  symbol = 'BINANCE:BTCUSDT', \n  theme = 'dark',\n  height = 600,\n  enableTrading = true,\n  showSignals = true\n}: TradingViewWidgetProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [tradeAmount, setTradeAmount] = useState('');\n  const [tradeMode, setTradeMode] = useState<'market' | 'limit'>('market');\n  const [limitPrice, setLimitPrice] = useState('');\n  const [priceHistory, setPriceHistory] = useState<number[]>([]);\n  const [currentPrice, setCurrentPrice] = useState<number>(0);\n  const [viewMode, setViewMode] = useState<'simple' | 'advanced' | 'professional'>('simple');\n  const [timeInterval, setTimeInterval] = useState<'1m' | '5m' | '15m' | '1h' | '4h' | '1d'>('5m');\n  const [isCompactMode, setIsCompactMode] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Get supported timeframes based on symbol\n  const getSupportedTimeframes = () => {\n    const ticker = symbol.includes(':') ? symbol.split(':')[1] : symbol;\n    if (ticker === 'BTCUSDT' || ticker === 'BTCUSD') {\n      // Only show supported timeframes for BTCUSD\n      return ['1M', '1W', '1D', '12H', '4H', '1H', '30M'];\n    }\n    // Default timeframes for other symbols\n    return ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w'];\n  };\n\n  const supportedTimeframes = getSupportedTimeframes();\n\n  // Extract ticker from symbol (BINANCE:BTCUSDT -> BTCUSDT)\n  const ticker = symbol.includes(':') ? symbol.split(':')[1] : symbol;\n\n  // Fetch current market data\n  const { data: marketData } = useQuery({\n    queryKey: [`/api/market/price/${ticker}`],\n    refetchInterval: 5000, // Update every 5 seconds\n  });\n\n  // Fetch signals for this ticker\n  const { data: signals = [] } = useQuery({\n    queryKey: [`/api/signals/${ticker}`],\n  });\n\n  // Trading mutations\n  const buyMutation = useMutation({\n    mutationFn: async (data: { amount: number; price?: number }) => {\n      return apiRequest('POST', '/api/trading/buy', {\n        ticker,\n        amount: data.amount,\n        type: tradeMode,\n        price: data.price\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Buy Order Placed\",\n        description: `Successfully placed ${tradeMode} buy order for ${ticker}`,\n      });\n      setTradeAmount('');\n      setLimitPrice('');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Trade Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sellMutation = useMutation({\n    mutationFn: async (data: { amount: number; price?: number }) => {\n      return apiRequest('POST', '/api/trading/sell', {\n        ticker,\n        amount: data.amount,\n        type: tradeMode,\n        price: data.price\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sell Order Placed\", \n        description: `Successfully placed ${tradeMode} sell order for ${ticker}`,\n      });\n      setTradeAmount('');\n      setLimitPrice('');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Trade Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update price history and current price\n  useEffect(() => {\n    if (marketData?.price) {\n      setCurrentPrice(marketData.price);\n      setPriceHistory(prev => {\n        const newHistory = [...prev, marketData.price];\n        return newHistory.slice(-100); // Keep last 100 price points\n      });\n    }\n  }, [marketData]);\n\n  // Generate additional chart data based on view mode\n  const getChartData = () => {\n    const baseData = {\n      volume: priceHistory.map(() => Math.random() * 1000000 + 500000),\n      rsi: priceHistory.map((_, i) => 30 + Math.sin(i * 0.1) * 20 + Math.random() * 10),\n      macd: priceHistory.map((_, i) => Math.sin(i * 0.05) * 500 + Math.random() * 200),\n    };\n    return baseData;\n  };\n\n  // Draw chart on canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || priceHistory.length < 2) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * devicePixelRatio;\n    canvas.height = rect.height * devicePixelRatio;\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n\n    const width = rect.width;\n    const height = rect.height;\n    const chartHeight = isCompactMode ? height * 0.8 : height;\n\n    // Clear canvas\n    ctx.fillStyle = theme === 'dark' ? '#0a0a0a' : '#ffffff';\n    ctx.fillRect(0, 0, width, height);\n\n    // Calculate price range\n    const minPrice = Math.min(...priceHistory);\n    const maxPrice = Math.max(...priceHistory);\n    const priceRange = maxPrice - minPrice || 1;\n\n    // Get additional data for advanced modes\n    const chartData = getChartData();\n\n    // Draw grid lines based on view mode\n    const gridIntensity = viewMode === 'simple' ? 0.3 : viewMode === 'advanced' ? 0.5 : 0.7;\n    ctx.strokeStyle = theme === 'dark' ? `rgba(255,255,255,${gridIntensity * 0.2})` : `rgba(0,0,0,${gridIntensity * 0.2})`;\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines\n    const gridLines = viewMode === 'simple' ? 3 : viewMode === 'advanced' ? 5 : 8;\n    for (let i = 0; i <= gridLines; i++) {\n      const y = (chartHeight / gridLines) * i;\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n\n      // Price labels\n      const price = maxPrice - (priceRange / gridLines) * i;\n      ctx.fillStyle = theme === 'dark' ? '#888888' : '#666666';\n      ctx.font = isCompactMode ? '10px Arial' : '12px Arial';\n      ctx.fillText(`$${price.toFixed(viewMode === 'professional' ? 2 : 0)}`, 5, y - 5);\n    }\n\n    // Vertical grid lines\n    const verticalLines = viewMode === 'simple' ? 6 : viewMode === 'advanced' ? 10 : 15;\n    for (let i = 0; i <= verticalLines; i++) {\n      const x = (width / verticalLines) * i;\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, chartHeight);\n      ctx.stroke();\n\n      // Time labels for professional mode\n      if (viewMode === 'professional' && i % 3 === 0) {\n        const timeAgo = Math.round((verticalLines - i) * (timeInterval === '1m' ? 1 : timeInterval === '5m' ? 5 : 15));\n        ctx.fillStyle = theme === 'dark' ? '#666666' : '#888888';\n        ctx.font = '10px Arial';\n        ctx.fillText(`-${timeAgo}${timeInterval.slice(-1)}`, x + 2, chartHeight + 12);\n      }\n    }\n\n    // Draw price line with different styles based on view mode\n    const lineWidth = viewMode === 'simple' ? 2 : viewMode === 'advanced' ? 3 : 2;\n    const lineColor = viewMode === 'simple' ? '#00d4aa' : viewMode === 'advanced' ? '#0ea5e9' : '#8b5cf6';\n    \n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath();\n\n    priceHistory.forEach((price, index) => {\n      const x = (width / (priceHistory.length - 1)) * index;\n      const y = chartHeight - ((price - minPrice) / priceRange) * chartHeight;\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    ctx.stroke();\n\n    // Add technical indicators for advanced and professional modes\n    if (viewMode === 'advanced' || viewMode === 'professional') {\n      // Moving Average (Simple)\n      const ma20 = [];\n      for (let i = 0; i < priceHistory.length; i++) {\n        const start = Math.max(0, i - 19);\n        const subset = priceHistory.slice(start, i + 1);\n        ma20.push(subset.reduce((a, b) => a + b, 0) / subset.length);\n      }\n\n      ctx.strokeStyle = '#f59e0b';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ma20.forEach((price, index) => {\n        const x = (width / (ma20.length - 1)) * index;\n        const y = chartHeight - ((price - minPrice) / priceRange) * chartHeight;\n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.stroke();\n    }\n\n    // Professional mode: Add volume bars at bottom\n    if (viewMode === 'professional' && !isCompactMode) {\n      const volumeHeight = height * 0.2;\n      const volumeY = chartHeight + 20;\n      const maxVolume = Math.max(...chartData.volume);\n\n      ctx.fillStyle = theme === 'dark' ? 'rgba(100, 116, 139, 0.6)' : 'rgba(148, 163, 184, 0.6)';\n      chartData.volume.forEach((vol, index) => {\n        const x = (width / (chartData.volume.length - 1)) * index;\n        const barHeight = (vol / maxVolume) * volumeHeight;\n        ctx.fillRect(x - 1, volumeY + volumeHeight - barHeight, 2, barHeight);\n      });\n\n      // Volume label\n      ctx.fillStyle = theme === 'dark' ? '#64748b' : '#475569';\n      ctx.font = '10px Arial';\n      ctx.fillText('Volume', 5, volumeY + 10);\n    }\n\n    // Draw current price indicator\n    if (currentPrice > 0) {\n      const currentY = chartHeight - ((currentPrice - minPrice) / priceRange) * chartHeight;\n      \n      // Price line\n      ctx.strokeStyle = '#ffcc00';\n      ctx.lineWidth = viewMode === 'professional' ? 2 : 1;\n      ctx.setLineDash([5, 5]);\n      ctx.beginPath();\n      ctx.moveTo(0, currentY);\n      ctx.lineTo(width, currentY);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Price label with background\n      const fontSize = isCompactMode ? 12 : 14;\n      ctx.font = `bold ${fontSize}px Arial`;\n      const priceText = `$${currentPrice.toFixed(viewMode === 'professional' ? 2 : 0)}`;\n      const textWidth = ctx.measureText(priceText).width;\n      \n      // Background for price label\n      ctx.fillStyle = theme === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)';\n      ctx.fillRect(width - textWidth - 10, currentY - fontSize - 2, textWidth + 8, fontSize + 4);\n      \n      // Price text\n      ctx.fillStyle = '#ffcc00';\n      ctx.fillText(priceText, width - textWidth - 6, currentY - 2);\n\n      // Professional mode: Add price change indicator\n      if (viewMode === 'professional' && priceHistory.length > 1) {\n        const previousPrice = priceHistory[priceHistory.length - 2];\n        const change = currentPrice - previousPrice;\n        const changePercent = (change / previousPrice) * 100;\n        \n        ctx.font = '10px Arial';\n        const changeText = `${change >= 0 ? '+' : ''}${change.toFixed(2)} (${changePercent.toFixed(2)}%)`;\n        ctx.fillStyle = change >= 0 ? '#22c55e' : '#ef4444';\n        ctx.fillText(changeText, width - textWidth - 6, currentY + 12);\n      }\n    }\n\n    // Draw buy/sell signals with enhanced styling\n    if (showSignals && Array.isArray(signals) && signals.length > 0) {\n      signals.forEach((signal: Signal, index: number) => {\n        const signalPrice = parseFloat(signal.price);\n        const signalY = chartHeight - ((signalPrice - minPrice) / priceRange) * chartHeight;\n        const markerSize = viewMode === 'simple' ? 4 : viewMode === 'advanced' ? 6 : 8;\n        const signalX = width - 30 - (index * 25);\n        \n        // Signal marker with glow effect for professional mode\n        if (viewMode === 'professional') {\n          // Glow effect\n          ctx.shadowColor = signal.type === 'buy' ? '#22c55e' : '#ef4444';\n          ctx.shadowBlur = 10;\n        }\n        \n        ctx.fillStyle = signal.type === 'buy' ? '#22c55e' : '#ef4444';\n        ctx.beginPath();\n        ctx.arc(signalX, signalY, markerSize, 0, 2 * Math.PI);\n        ctx.fill();\n        \n        // Reset shadow\n        ctx.shadowBlur = 0;\n\n        // Signal label with better positioning\n        if (viewMode === 'advanced' || viewMode === 'professional') {\n          ctx.fillStyle = signal.type === 'buy' ? '#22c55e' : '#ef4444';\n          ctx.font = isCompactMode ? '10px Arial' : '12px Arial';\n          const label = viewMode === 'professional' ? `${signal.type?.toUpperCase() || 'SIGNAL'} $${signalPrice.toFixed(0)}` : signal.type?.toUpperCase() || 'SIGNAL';\n          const labelWidth = ctx.measureText(label).width;\n          \n          // Background for label\n          ctx.fillStyle = theme === 'dark' ? 'rgba(0,0,0,0.7)' : 'rgba(255,255,255,0.7)';\n          ctx.fillRect(signalX - labelWidth/2 - 2, signalY - markerSize - 18, labelWidth + 4, 14);\n          \n          // Label text\n          ctx.fillStyle = signal.type === 'buy' ? '#22c55e' : '#ef4444';\n          ctx.fillText(label, signalX - labelWidth/2, signalY - markerSize - 8);\n        }\n      });\n    }\n\n  }, [priceHistory, currentPrice, theme, showSignals, signals, viewMode, timeInterval, isCompactMode]);\n\n  const handleTrade = (action: 'buy' | 'sell') => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to trade\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(tradeAmount);\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid trade amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const tradeData: { amount: number; price?: number } = { amount };\n    \n    if (tradeMode === 'limit') {\n      const price = parseFloat(limitPrice);\n      if (!price || price <= 0) {\n        toast({\n          title: \"Invalid Price\",\n          description: \"Please enter a valid limit price\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      tradeData.price = price;\n    }\n\n    if (action === 'buy') {\n      buyMutation.mutate(tradeData);\n    } else {\n      sellMutation.mutate(tradeData);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Chart Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground\">{ticker} Trading Chart</h3>\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            <span>Price: ${currentPrice.toFixed(2)}</span>\n            {marketData?.change24h && (\n              <span className={marketData.change24h >= 0 ? 'text-green-400' : 'text-red-400'}>\n                {marketData.change24h >= 0 ? '+' : ''}{marketData.change24h.toFixed(2)}%\n              </span>\n            )}\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\">Live</Badge>\n          <Badge variant={showSignals ? \"default\" : \"secondary\"}>\n            Signals {showSignals ? 'On' : 'Off'}\n          </Badge>\n        </div>\n      </div>\n\n      {/* One-Click View Mode Switcher */}\n      <Card className=\"bg-card border-border mb-4\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            {/* View Mode Buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <Label className=\"text-sm font-medium text-foreground\">View Mode:</Label>\n              <div className=\"flex space-x-1\">\n                <Button\n                  variant={viewMode === 'simple' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('simple')}\n                >\n                  Simple\n                </Button>\n                <Button\n                  variant={viewMode === 'advanced' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('advanced')}\n                >\n                  Advanced\n                </Button>\n                <Button\n                  variant={viewMode === 'professional' ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('professional')}\n                >\n                  Pro\n                </Button>\n              </div>\n            </div>\n\n            {/* Time Interval Buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <Label className=\"text-sm font-medium text-foreground\">Interval:</Label>\n              <div className=\"flex space-x-1\">\n                {['1m', '5m', '15m', '1h', '4h', '1d'].map((interval) => (\n                  <Button\n                    key={interval}\n                    variant={timeInterval === interval ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setTimeInterval(interval as any)}\n                  >\n                    {interval}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Compact Mode Toggle */}\n            <div className=\"flex items-center space-x-2\">\n              <Label className=\"text-sm font-medium text-foreground\">Compact:</Label>\n              <Button\n                variant={isCompactMode ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setIsCompactMode(!isCompactMode)}\n              >\n                {isCompactMode ? 'On' : 'Off'}\n              </Button>\n            </div>\n          </div>\n\n          {/* View Mode Description */}\n          <div className=\"mt-3 text-xs text-muted-foreground\">\n            {viewMode === 'simple' && \"Basic price chart with essential trading tools\"}\n            {viewMode === 'advanced' && \"Enhanced chart with technical indicators and volume\"}\n            {viewMode === 'professional' && \"Full-featured chart with advanced analytics and order book\"}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Chart Canvas */}\n      <div className=\"relative bg-card border border-border rounded-lg overflow-hidden\">\n        <canvas\n          ref={canvasRef}\n          className=\"w-full block\"\n          style={{ height: `${height}px` }}\n        />\n        \n        {/* Loading overlay */}\n        {priceHistory.length < 2 && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-card/80\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-2\" />\n              <p className=\"text-muted-foreground\">Loading chart data...</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Signal Information Panel */}\n      {enableTrading && (\n        <Card className=\"bg-card border-border\">\n          <CardHeader>\n            <CardTitle className=\"text-foreground\">Signal Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                This platform provides trading signals and market analysis. \n                Trading signals are for informational purposes only.\n              </div>\n              \n              <div className=\"bg-muted p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Signal Features</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• TradingView webhook integration</li>\n                  <li>• Real-time buy/sell signal alerts</li>\n                  <li>• Multiple timeframe support for BTCUSD</li>\n                  <li>• Historical signal tracking</li>\n                  <li>• Email and SMS notifications</li>\n                </ul>\n              </div>\n              \n              <div className=\"text-xs text-muted-foreground p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                <strong>Disclaimer:</strong> This platform does not facilitate actual trading. \n                All signals are for educational and informational purposes only. \n                Users must execute trades on their own trading platforms.\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Signals */}\n      {showSignals && signals.length > 0 && (\n        <Card className=\"bg-card border-border\">\n          <CardHeader>\n            <CardTitle className=\"text-foreground\">Recent Signals</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {signals.slice(0, 3).map((signal: Signal) => (\n                <div key={signal.id} className=\"flex items-center justify-between p-2 border border-border rounded\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={signal.signalType === 'buy' ? 'default' : 'destructive'}>\n                      {signal.signalType?.toUpperCase() || 'N/A'}\n                    </Badge>\n                    <span className=\"text-foreground\">${signal.price}</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {new Date(signal.timestamp).toLocaleTimeString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}"],"names":["TradingViewWidget","symbol","theme","height","enableTrading","showSignals","canvasRef","useRef","tradeAmount","setTradeAmount","useState","tradeMode","setTradeMode","limitPrice","setLimitPrice","priceHistory","setPriceHistory","currentPrice","setCurrentPrice","viewMode","setViewMode","timeInterval","setTimeInterval","isCompactMode","setIsCompactMode","toast","useToast","useAuth","ticker","marketData","useQuery","signals","useMutation","data","apiRequest","error","useEffect","prev","getChartData","_","i","canvas","ctx","rect","width","chartHeight","minPrice","maxPrice","priceRange","chartData","gridIntensity","gridLines","y","price","verticalLines","x","timeAgo","lineWidth","lineColor","index","ma20","start","subset","a","b","volumeHeight","volumeY","maxVolume","vol","barHeight","currentY","fontSize","priceText","textWidth","previousPrice","change","changePercent","changeText","signal","signalPrice","signalY","markerSize","signalX","label","_a","_b","labelWidth","jsxs","jsx","Badge","Card","CardContent","Label","Button","interval","CardHeader","CardTitle"],"mappings":"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"}