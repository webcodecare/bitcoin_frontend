{"version":3,"file":"signals-vH3MVYvx.js","sources":["../../src/pages/admin/signals.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Activity, \n  Plus, \n  Send,\n  TrendingUp,\n  TrendingDown,\n  Clock,\n  Filter\n} from \"lucide-react\";\n\ninterface Signal {\n  id: string;\n  userId: string;\n  ticker: string;\n  signalType: \"buy\" | \"sell\";\n  price: string;\n  timestamp: string;\n  source: string;\n  note?: string;\n  createdAt: string;\n}\n\ninterface SignalForm {\n  ticker: string;\n  signalType: \"buy\" | \"sell\";\n  price: number;\n  note: string;\n}\n\nexport default function AdminSignals() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isSignalDialogOpen, setIsSignalDialogOpen] = useState(false);\n  const [filterType, setFilterType] = useState<\"all\" | \"buy\" | \"sell\">(\"all\");\n  const [filterTicker, setFilterTicker] = useState(\"all\");\n  const [signalForm, setSignalForm] = useState<SignalForm>({\n    ticker: \"\",\n    signalType: \"buy\",\n    price: 0,\n    note: \"\",\n  });\n\n  const authToken = localStorage.getItem(\"token\");\n\n  const { data: signals, isLoading: isLoadingSignals } = useQuery({\n    queryKey: [\"/api/signals\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/signals?limit=100\", {\n        headers: { Authorization: `Bearer ${authToken}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch signals\");\n      return await response.json();\n    },\n  });\n\n  const { data: tickers } = useQuery({\n    queryKey: [\"/api/admin/tickers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/tickers\", {\n        headers: { Authorization: `Bearer ${authToken}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch tickers\");\n      return await response.json();\n    },\n  });\n\n  const createSignalMutation = useMutation({\n    mutationFn: async (signal: SignalForm) => {\n      const response = await fetch(\"/api/admin/signals\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(signal),\n      });\n      if (!response.ok) throw new Error(\"Failed to create signal\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/signals\"] });\n      setSignalForm({ ticker: \"\", signalType: \"buy\", price: 0, note: \"\" });\n      setIsSignalDialogOpen(false);\n      toast({ title: \"Signal created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create signal\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredSignals = signals?.filter((signal: Signal) => {\n    const typeMatch = filterType === \"all\" || signal.signalType === filterType;\n    const tickerMatch = filterTicker === \"all\" || signal.ticker === filterTicker;\n    return typeMatch && tickerMatch;\n  });\n\n  const signalStats = {\n    total: signals?.length || 0,\n    buy: signals?.filter((s: Signal) => s.signalType === \"buy\").length || 0,\n    sell: signals?.filter((s: Signal) => s.signalType === \"sell\").length || 0,\n    today: signals?.filter((s: Signal) => \n      new Date(s.timestamp).toDateString() === new Date().toDateString()\n    ).length || 0,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar />\n        \n        {/* Main Content */}\n        <div className=\"ml-64 flex-1\">\n          {/* Top Bar */}\n          <header className=\"bg-card border-b border-border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Activity className=\"h-6 w-6\" />\n                <h1 className=\"text-2xl font-bold\">Signal Logs</h1>\n              </div>\n              <Dialog open={isSignalDialogOpen} onOpenChange={setIsSignalDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"crypto-gradient text-white\">\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    Create Signal\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Create Trading Signal</DialogTitle>\n                    <DialogDescription>\n                      Manually inject a trading signal to all subscribers\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"ticker\">Ticker</Label>\n                      <Select\n                        value={signalForm.ticker}\n                        onValueChange={(value) => setSignalForm({ ...signalForm, ticker: value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select ticker\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {tickers?.map((ticker: any) => (\n                            <SelectItem key={ticker.id} value={ticker.symbol}>\n                              {ticker.symbol} - {ticker.description}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"signalType\">Signal Type</Label>\n                      <Select\n                        value={signalForm.signalType}\n                        onValueChange={(value: \"buy\" | \"sell\") => \n                          setSignalForm({ ...signalForm, signalType: value })\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"buy\">Buy</SelectItem>\n                          <SelectItem value=\"sell\">Sell</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"price\">Price</Label>\n                      <Input\n                        id=\"price\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={signalForm.price}\n                        onChange={(e) => setSignalForm({ ...signalForm, price: parseFloat(e.target.value) })}\n                        placeholder=\"0.00\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"note\">Note (Optional)</Label>\n                      <Input\n                        id=\"note\"\n                        value={signalForm.note}\n                        onChange={(e) => setSignalForm({ ...signalForm, note: e.target.value })}\n                        placeholder=\"Additional information...\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setIsSignalDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={() => createSignalMutation.mutate(signalForm)}\n                      disabled={createSignalMutation.isPending}\n                      className=\"crypto-gradient text-white\"\n                    >\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      Send Signal\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </header>\n\n          {/* Signals Content */}\n          <div className=\"p-6 space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total Signals</p>\n                      <p className=\"text-2xl font-bold\">{signalStats.total}</p>\n                    </div>\n                    <Activity className=\"h-8 w-8 text-foreground\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Buy Signals</p>\n                      <p className=\"text-2xl font-bold text-emerald-400\">{signalStats.buy}</p>\n                    </div>\n                    <TrendingUp className=\"h-8 w-8 text-emerald-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Sell Signals</p>\n                      <p className=\"text-2xl font-bold text-red-400\">{signalStats.sell}</p>\n                    </div>\n                    <TrendingDown className=\"h-8 w-8 text-red-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Today</p>\n                      <p className=\"text-2xl font-bold text-blue-400\">{signalStats.today}</p>\n                    </div>\n                    <Clock className=\"h-8 w-8 text-blue-400\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Filter className=\"mr-2 h-5 w-5\" />\n                  Filters\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex space-x-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Signal Type</Label>\n                    <Select value={filterType} onValueChange={(value: \"all\" | \"buy\" | \"sell\") => setFilterType(value)}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All</SelectItem>\n                        <SelectItem value=\"buy\">Buy</SelectItem>\n                        <SelectItem value=\"sell\">Sell</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Ticker</Label>\n                    <Select value={filterTicker} onValueChange={setFilterTicker}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Tickers</SelectItem>\n                        {tickers?.map((ticker: any) => (\n                          <SelectItem key={ticker.id} value={ticker.symbol}>\n                            {ticker.symbol}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Signals Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Signals</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Ticker</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Time</TableHead>\n                      <TableHead>Source</TableHead>\n                      <TableHead>Note</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {isLoadingSignals ? (\n                      <TableRow>\n                        <TableCell colSpan={6} className=\"text-center py-8\">\n                          Loading signals...\n                        </TableCell>\n                      </TableRow>\n                    ) : filteredSignals?.map((signal: Signal) => (\n                      <TableRow key={signal.id}>\n                        <TableCell className=\"font-semibold\">{signal.ticker}</TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={signal.signalType === \"buy\" ? \"default\" : \"destructive\"}\n                            className={signal.signalType === \"buy\" ? \"bg-emerald-500\" : \"bg-red-500\"}\n                          >\n                            {signal.signalType === \"buy\" ? (\n                              <><TrendingUp className=\"mr-1 h-3 w-3\" /> BUY</>\n                            ) : (\n                              <><TrendingDown className=\"mr-1 h-3 w-3\" /> SELL</>\n                            )}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"font-mono\">${signal.price}</TableCell>\n                        <TableCell>{new Date(signal.timestamp).toLocaleString()}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{signal.source}</Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {signal.note || \"—\"}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["AdminSignals","toast","useToast","queryClient","useQueryClient","isSignalDialogOpen","setIsSignalDialogOpen","useState","filterType","setFilterType","filterTicker","setFilterTicker","signalForm","setSignalForm","authToken","signals","isLoadingSignals","useQuery","response","tickers","createSignalMutation","useMutation","signal","filteredSignals","typeMatch","tickerMatch","signalStats","jsxs","jsx","Sidebar","Activity","Dialog","DialogTrigger","Button","Send","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label","Select","value","SelectTrigger","SelectValue","SelectContent","ticker","SelectItem","Input","e","DialogFooter","Card","CardContent","TrendingUp","TrendingDown","Clock","CardHeader","CardTitle","Filter","Table","TableHeader","TableRow","TableHead","TableBody","TableCell","Badge","Fragment"],"mappings":"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"}