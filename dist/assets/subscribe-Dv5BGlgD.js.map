{"version":3,"file":"subscribe-Dv5BGlgD.js","sources":["../../src/pages/subscribe.tsx"],"sourcesContent":["// Use subscribe.tsx for paid subscriptions.\nimport React from 'react';\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"You are subscribed!\",\n      });\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button type=\"submit\">Subscribe</button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    apiRequest(\"POST\", \"/api/get-or-create-subscription\")\n      .then((res) => res.json())\n      .then((data) => {\n        setClientSecret(data.clientSecret)\n      });\n  }, []);\n\n  if (!clientSecret) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <SubscribeForm />\n    </Elements>\n  );\n};"],"names":["stripePromise","loadStripe","SubscribeForm","stripe","useStripe","elements","useElements","toast","useToast","handleSubmit","e","error","jsxs","jsx","PaymentElement","Subscribe","clientSecret","setClientSecret","useState","useEffect","apiRequest","res","data","Elements"],"mappings":"iPAWQ,MAAA,IAAI,MAAM,qDAAqD,EAEvE,MAAMA,EAAgBC,EAAW,EAAsC,EAEjEC,EAAgB,IAAM,CAC1B,MAAMC,EAASC,EAAU,EACnBC,EAAWC,EAAY,EACvB,CAAE,MAAAC,CAAM,EAAIC,EAAS,EACrBC,EAAe,MAAOC,GAAuB,CAG7C,GAFJA,EAAE,eAAe,EAEb,CAACP,GAAU,CAACE,EACd,OAGF,KAAM,CAAE,MAAAM,CAAA,EAAU,MAAMR,EAAO,eAAe,CAC5C,SAAAE,EACA,cAAe,CACb,WAAY,OAAO,SAAS,MAAA,CAC9B,CACD,EAGOE,EADJI,EACI,CACJ,MAAO,iBACP,YAAaA,EAAM,QACnB,QAAS,aAAA,EAGL,CACJ,MAAO,qBACP,YAAa,qBAAA,CAJd,CAOL,EAGE,OAACC,EAAA,KAAA,OAAK,CAAA,SAAUH,EACd,SAAA,CAAAI,EAAA,IAACC,EAAe,EAAA,QACf,SAAA,CAAO,KAAK,SAAS,SAAS,WAAA,CAAA,CAAA,EACjC,CAEJ,EAEA,SAAwBC,GAAY,CAClC,KAAM,CAACC,EAAcC,CAAe,EAAIC,EAAAA,SAAS,EAAE,EAWnD,OATAC,EAAAA,UAAU,IAAM,CAEdC,EAAW,OAAQ,iCAAiC,EACjD,KAAMC,GAAQA,EAAI,KAAM,CAAA,EACxB,KAAMC,GAAS,CACdL,EAAgBK,EAAK,YAAY,CAAA,CAClC,CACL,EAAG,EAAE,EAEAN,EASFH,EAAA,IAAAU,EAAS,CAAA,OAAQvB,EAAe,QAAS,CAAE,aAAAgB,CAAa,EACvD,SAACH,EAAAA,IAAAX,EAAA,CAAA,CAAc,EACjB,EATGW,EAAA,IAAA,MAAI,CAAA,UAAU,4CACb,SAAAA,EAAAA,IAAC,OAAI,UAAU,iFAAiF,aAAW,SAAA,CAAS,EACtH,CASN"}