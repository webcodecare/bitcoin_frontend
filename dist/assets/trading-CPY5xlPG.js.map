{"version":3,"mappings":"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","names":["TradingViewWidget","lazy","__vitePreload","ProfessionalTradingInterface","MoodBoardWidget","TradingPage","useAuth","selectedTicker","setSelectedTicker","useState","orderType","setOrderType","limitPrice","setLimitPrice","chartLoaded","setChartLoaded","priceAnimationKey","setPriceAnimationKey","marketData","useQuery","currentPrice","priceChange","useEffect","prev","timer","jsxs","jsx","Sidebar","motion","TrendingUp","TrendingDown","Card","CardContent","AnimatePresence","Loader2","Suspense"],"ignoreList":[],"sources":["../../src/pages/trading.tsx"],"sourcesContent":["import { useState, useEffect, lazy, Suspense } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/layout/Sidebar\";\n\n// Lazy load heavy components\nconst TradingViewWidget = lazy(() => import(\"@/components/charts/TradingViewWidget\"));\nconst ProfessionalTradingInterface = lazy(() => import(\"@/components/trading/ProfessionalTradingInterface\"));\nconst MoodBoardWidget = lazy(() => import(\"@/components/trading/MoodBoardWidget\"));\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Activity,\n  DollarSign,\n  Clock,\n  Target,\n  BarChart3,\n  Loader2\n} from \"lucide-react\";\n\nexport default function TradingPage() {\n  const { user } = useAuth();\n  const [selectedTicker, setSelectedTicker] = useState(\"BTCUSDT\");\n  const [orderType, setOrderType] = useState(\"limit\");\n  const [orderAmount, setOrderAmount] = useState(\"\");\n  const [limitPrice, setLimitPrice] = useState(\"\");\n  const [isPlacingOrder, setIsPlacingOrder] = useState(false);\n  const [orderSuccess, setOrderSuccess] = useState(false);\n  const [chartLoaded, setChartLoaded] = useState(false);\n  const [priceAnimationKey, setPriceAnimationKey] = useState(0);\n\n  // Fetch market data\n  const { data: marketData } = useQuery({\n    queryKey: [`/api/market/price/${selectedTicker}`],\n    refetchInterval: 2000,\n  });\n\n  const currentPrice = (marketData as any)?.price || 65755.0;\n  const priceChange = (marketData as any)?.change24h || 2.34;\n\n  // Trigger price animation when price changes\n  useEffect(() => {\n    setPriceAnimationKey(prev => prev + 1);\n  }, [currentPrice]);\n\n  // Chart loading simulation\n  useEffect(() => {\n    const timer = setTimeout(() => setChartLoaded(true), 1500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Auto-fill current price when switching to limit orders\n  useEffect(() => {\n    if (orderType === 'limit' && !limitPrice) {\n      setLimitPrice(currentPrice.toString());\n    }\n  }, [orderType, currentPrice, limitPrice]);\n\n  // Quick amount buttons\n  const setQuickAmount = (percentage: number) => {\n    const maxAmount = 10000 / (parseFloat(limitPrice) || currentPrice);\n    const amount = (maxAmount * percentage / 100).toFixed(6);\n    setOrderAmount(amount);\n  };\n\n  // Market statistics for information display\n  const marketStats = {\n    volume24h: \"$28.5B\",\n    marketCap: \"$1.37T\",\n    circulatingSupply: \"19.8M BTC\",\n    allTimeHigh: \"$73,750\",\n    dominance: \"54.3%\"\n  };\n\n  const handleOrder = async (side: 'buy' | 'sell') => {\n    if (!orderAmount || (!limitPrice && orderType === 'limit')) {\n      alert('Please fill in all required fields');\n      return;\n    }\n\n    setIsPlacingOrder(true);\n    \n    try {\n      // Simulate order placement\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log(\"Order placed:\", {\n        side,\n        ticker: selectedTicker,\n        type: orderType,\n        amount: orderAmount,\n        price: orderType === 'limit' ? limitPrice : currentPrice\n      });\n      \n      setOrderSuccess(true);\n      setOrderAmount(\"\");\n      setLimitPrice(\"\");\n      \n      // Reset success state after 3 seconds\n      setTimeout(() => setOrderSuccess(false), 3000);\n      \n    } catch (error) {\n      console.error('Order failed:', error);\n    } finally {\n      setIsPlacingOrder(false);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden ml-0 md:ml-64\">\n        {/* Header */}\n        <div className=\"border-b bg-card/50 backdrop-blur-sm p-2 sm:p-3 lg:p-4\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 sm:gap-4\">\n            <div className=\"flex items-center gap-2 lg:gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-6 h-6 lg:w-8 lg:h-8 bg-orange-500 rounded-full flex items-center justify-center text-white font-bold text-sm lg:text-base\">\n                  B\n                </div>\n                <div>\n                  <h1 className=\"text-lg lg:text-xl font-bold\">BTC-USDT</h1>\n                  <p className=\"text-xs lg:text-sm text-muted-foreground\">Bitcoin</p>\n                </div>\n              </div>\n              \n              <div className=\"hidden sm:flex items-center gap-3 lg:gap-6 overflow-x-auto\">\n                <div className=\"min-w-[100px]\">\n                  <p className=\"text-xs lg:text-sm text-muted-foreground\">Last Price</p>\n                  <motion.div\n                    key={priceAnimationKey}\n                    initial={{ scale: 0.95, opacity: 0.8 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                    className=\"text-lg lg:text-2xl font-bold\"\n                  >\n                    ${currentPrice.toLocaleString()}\n                  </motion.div>\n                </div>\n                <div className=\"min-w-[100px]\">\n                  <p className=\"text-xs lg:text-sm text-muted-foreground\">24h Change</p>\n                  <motion.div \n                    key={`change-${priceAnimationKey}`}\n                    initial={{ x: -10, opacity: 0 }}\n                    animate={{ x: 0, opacity: 1 }}\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\n                    className={`flex items-center gap-1 ${priceChange >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                  >\n                    <motion.div\n                      animate={{ rotate: priceChange >= 0 ? 0 : 180 }}\n                      transition={{ duration: 0.2 }}\n                    >\n                      {priceChange >= 0 ? <TrendingUp className=\"h-3 w-3 lg:h-4 lg:w-4\" /> : <TrendingDown className=\"h-3 w-3 lg:h-4 lg:w-4\" />}\n                    </motion.div>\n                    <span className=\"font-medium text-sm lg:text-base\">{priceChange > 0 ? '+' : ''}{priceChange.toFixed(2)}%</span>\n                  </motion.div>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">24h High</p>\n                  <p className=\"font-medium\">${(currentPrice * 1.02).toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">24h Low</p>\n                  <p className=\"font-medium\">${(currentPrice * 0.98).toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">24h Volume</p>\n                  <p className=\"font-medium\">{Math.floor(Math.random() * 100000)}.{Math.floor(Math.random() * 1000)}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Chart Area */}\n          <div className=\"flex-1 p-2 lg:p-4\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, ease: \"easeOut\" }}\n            >\n              <Card className=\"h-full bg-card/50 backdrop-blur-sm border-border/50 relative overflow-hidden\">\n                <CardContent className=\"p-4 h-full relative\">\n                  <AnimatePresence>\n                    {!chartLoaded && (\n                      <motion.div\n                        initial={{ opacity: 1 }}\n                        exit={{ opacity: 0 }}\n                        transition={{ duration: 0.5 }}\n                        className=\"absolute inset-0 z-10 flex items-center justify-center bg-background/50 backdrop-blur-sm\"\n                      >\n                        <div className=\"flex flex-col items-center gap-4\">\n                          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                          <div className=\"text-sm text-muted-foreground\">Loading TradingView Chart...</div>\n                        </div>\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                  <motion.div\n                    initial={{ scale: 0.95, opacity: 0 }}\n                    animate={{ scale: 1, opacity: chartLoaded ? 1 : 0.5 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                    className=\"h-full\"\n                  >\n                    <Suspense fallback={<div className=\"h-[400px] w-full bg-muted animate-pulse rounded-lg flex items-center justify-center\"><div className=\"text-muted-foreground\">Loading Chart...</div></div>}>\n                      <TradingViewWidget \n                        symbol={`BINANCE:${selectedTicker}`}\n                        theme=\"dark\"\n                        height={600}\n                        enableTrading={true}\n                        showSignals={true}\n                      />\n                    </Suspense>\n                  </motion.div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n          \n          {/* Trading Interface Grid */}\n          <div className=\"p-4 grid grid-cols-1 xl:grid-cols-4 gap-4\">\n            {/* Professional Trading Interface */}\n            <div className=\"xl:col-span-3\">\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, ease: \"easeOut\", delay: 0.2 }}\n              >\n                <Suspense fallback={<div className=\"h-64 w-full bg-muted animate-pulse rounded-lg\" />}>\n                  <ProfessionalTradingInterface \n                    symbol={selectedTicker}\n                    currentPrice={currentPrice}\n                  />\n                </Suspense>\n              </motion.div>\n            </div>\n            \n            {/* Mood Board Widget */}\n            <div className=\"xl:col-span-1\">\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.6, ease: \"easeOut\", delay: 0.4 }}\n              >\n                <Suspense fallback={<div className=\"h-64 w-full bg-muted animate-pulse rounded-lg\" />}>\n                  <MoodBoardWidget />\n                </Suspense>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n"],"file":"assets/trading-CPY5xlPG.js"}