{"version":3,"file":"admin-CX6oj48H.js","sources":["../../src/pages/admin.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Switch as UISwitch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Users, \n  Activity, \n  DollarSign, \n  Server, \n  Plus, \n  Edit, \n  Trash2,\n  Send,\n  CheckCircle,\n  XCircle\n} from \"lucide-react\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: \"admin\" | \"user\";\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Ticker {\n  id: string;\n  symbol: string;\n  description: string;\n  isEnabled: boolean;\n  createdAt: string;\n}\n\ninterface SignalForm {\n  ticker: string;\n  signalType: \"buy\" | \"sell\";\n  price: number;\n  note: string;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [signalForm, setSignalForm] = useState<SignalForm>({\n    ticker: \"\",\n    signalType: \"buy\",\n    price: 0,\n    note: \"\",\n  });\n  const [newTicker, setNewTicker] = useState({\n    symbol: \"\",\n    description: \"\",\n    isEnabled: true,\n  });\n  const [isSignalDialogOpen, setIsSignalDialogOpen] = useState(false);\n  const [isTickerDialogOpen, setIsTickerDialogOpen] = useState(false);\n\n  const authToken = localStorage.getItem(\"auth_token\");\n\n  // Fetch admin stats\n  const { data: users, isLoading: isLoadingUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        headers: { Authorization: `Bearer ${authToken}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return await response.json() as User[];\n    },\n  });\n\n  const { data: tickers, isLoading: isLoadingTickers } = useQuery({\n    queryKey: [\"/api/admin/tickers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/tickers\", {\n        headers: { Authorization: `Bearer ${authToken}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch tickers\");\n      return await response.json() as Ticker[];\n    },\n  });\n\n  const { data: signals, isLoading: isLoadingSignals } = useQuery({\n    queryKey: [\"/api/signals\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/signals?limit=20\", {\n        headers: { Authorization: `Bearer ${authToken}` },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch signals\");\n      return await response.json();\n    },\n  });\n\n  // Mutations\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: Partial<User> }) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(\"Failed to update user\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update user\", variant: \"destructive\" });\n    },\n  });\n\n  const createTickerMutation = useMutation({\n    mutationFn: async (ticker: typeof newTicker) => {\n      const response = await fetch(\"/api/admin/tickers\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(ticker),\n      });\n      if (!response.ok) throw new Error(\"Failed to create ticker\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tickers\"] });\n      setNewTicker({ symbol: \"\", description: \"\", isEnabled: true });\n      setIsTickerDialogOpen(false);\n      toast({ title: \"Ticker created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create ticker\", variant: \"destructive\" });\n    },\n  });\n\n  const updateTickerMutation = useMutation({\n    mutationFn: async ({ tickerId, updates }: { tickerId: string; updates: Partial<Ticker> }) => {\n      const response = await fetch(`/api/admin/tickers/${tickerId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(\"Failed to update ticker\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tickers\"] });\n      toast({ title: \"Ticker updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update ticker\", variant: \"destructive\" });\n    },\n  });\n\n  const createSignalMutation = useMutation({\n    mutationFn: async (signal: SignalForm) => {\n      const response = await fetch(\"/api/admin/signals\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`,\n        },\n        body: JSON.stringify(signal),\n      });\n      if (!response.ok) throw new Error(\"Failed to create signal\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/signals\"] });\n      setSignalForm({ ticker: \"\", signalType: \"buy\", price: 0, note: \"\" });\n      setIsSignalDialogOpen(false);\n      toast({ title: \"Signal injected successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to inject signal\", variant: \"destructive\" });\n    },\n  });\n\n  const adminStats = [\n    {\n      title: \"Total Users\",\n      value: users?.length.toString() || \"0\",\n      icon: Users,\n      color: \"text-foreground\",\n    },\n    {\n      title: \"Active Signals\",\n      value: signals?.length.toString() || \"0\",\n      icon: Activity,\n      color: \"text-emerald-400\",\n    },\n    {\n      title: \"Revenue\",\n      value: \"$45,678\",\n      icon: DollarSign,\n      color: \"text-emerald-400\",\n    },\n    {\n      title: \"System Status\",\n      value: \"Online\",\n      icon: Server,\n      color: \"text-emerald-400\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar />\n        \n        {/* Main Content */}\n        <div className=\"ml-64 flex-1\">\n          {/* Top Bar */}\n          <header className=\"bg-card border-b border-border p-6\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-muted-foreground\">Last login: 2h ago</span>\n                <div className=\"w-8 h-8 bg-destructive rounded-full flex items-center justify-center text-destructive-foreground font-semibold\">\n                  A\n                </div>\n              </div>\n            </div>\n          </header>\n\n          {/* Admin Content */}\n          <div className=\"p-6 space-y-6\">\n            {/* Admin Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {adminStats.map((stat, index) => {\n                const IconComponent = stat.icon;\n                return (\n                  <Card key={index}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                          <p className={`text-2xl font-bold ${stat.color}`}>{stat.value}</p>\n                        </div>\n                        <IconComponent className={`h-8 w-8 ${stat.color}`} />\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* User Management */}\n            <Card>\n              <CardHeader>\n                <CardTitle>User Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingUsers ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 5 }, (_, i) => (\n                      <Skeleton key={i} className=\"h-12 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Created</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users?.map((user) => (\n                        <TableRow key={user.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">\n                                {user.firstName} {user.lastName}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                              {user.role}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <UISwitch\n                                checked={user.isActive}\n                                onCheckedChange={(checked: boolean) =>\n                                  updateUserMutation.mutate({\n                                    userId: user.id,\n                                    updates: { isActive: checked },\n                                  })\n                                }\n                              />\n                              <span className=\"text-sm\">\n                                {user.isActive ? 'Active' : 'Inactive'}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateUserMutation.mutate({\n                                  userId: user.id,\n                                  updates: { role: user.role === 'admin' ? 'user' : 'admin' },\n                                })\n                              }\n                            >\n                              {user.role === 'admin' ? 'Remove Admin' : 'Make Admin'}\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Ticker Management */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Manage Available Tickers</CardTitle>\n                  <Dialog open={isTickerDialogOpen} onOpenChange={setIsTickerDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Ticker\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Add New Ticker</DialogTitle>\n                        <DialogDescription>\n                          Add a new cryptocurrency ticker to the platform.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"symbol\">Symbol</Label>\n                          <Input\n                            id=\"symbol\"\n                            placeholder=\"BTCUSDT\"\n                            value={newTicker.symbol}\n                            onChange={(e) => setNewTicker({ ...newTicker, symbol: e.target.value })}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"description\">Description</Label>\n                          <Input\n                            id=\"description\"\n                            placeholder=\"Bitcoin/USDT\"\n                            value={newTicker.description}\n                            onChange={(e) => setNewTicker({ ...newTicker, description: e.target.value })}\n                          />\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <UISwitch\n                            checked={newTicker.isEnabled}\n                            onCheckedChange={(checked: boolean) => setNewTicker({ ...newTicker, isEnabled: checked })}\n                          />\n                          <Label>Enabled</Label>\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button\n                          onClick={() => createTickerMutation.mutate(newTicker)}\n                          disabled={createTickerMutation.isPending}\n                        >\n                          {createTickerMutation.isPending ? \"Creating...\" : \"Create Ticker\"}\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoadingTickers ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }, (_, i) => (\n                      <Skeleton key={i} className=\"h-12 w-full\" />\n                    ))}\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Symbol</TableHead>\n                        <TableHead>Description</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {tickers?.map((ticker) => (\n                        <TableRow key={ticker.id}>\n                          <TableCell className=\"font-semibold\">{ticker.symbol}</TableCell>\n                          <TableCell className=\"text-muted-foreground\">{ticker.description}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <UISwitch\n                                checked={ticker.isEnabled}\n                                onCheckedChange={(checked: boolean) =>\n                                  updateTickerMutation.mutate({\n                                    tickerId: ticker.id,\n                                    updates: { isEnabled: checked },\n                                  })\n                                }\n                              />\n                              {ticker.isEnabled ? (\n                                <CheckCircle className=\"h-4 w-4 text-emerald-400\" />\n                              ) : (\n                                <XCircle className=\"h-4 w-4 text-red-400\" />\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"ghost\" size=\"icon\">\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive\">\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Manual Signal Injection */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Manual Signal Injection</CardTitle>\n                  <Dialog open={isSignalDialogOpen} onOpenChange={setIsSignalDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"destructive\">\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Inject Signal\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Inject Manual Signal</DialogTitle>\n                        <DialogDescription>\n                          Manually inject a buy/sell signal for testing or premium users.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"ticker\">Ticker</Label>\n                          <Select\n                            value={signalForm.ticker}\n                            onValueChange={(value) => setSignalForm({ ...signalForm, ticker: value })}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select ticker\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {tickers?.filter(t => t.isEnabled).map((ticker) => (\n                                <SelectItem key={ticker.id} value={ticker.symbol}>\n                                  {ticker.symbol} - {ticker.description}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"signalType\">Signal Type</Label>\n                          <Select\n                            value={signalForm.signalType}\n                            onValueChange={(value: \"buy\" | \"sell\") => setSignalForm({ ...signalForm, signalType: value })}\n                          >\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"buy\">Buy</SelectItem>\n                              <SelectItem value=\"sell\">Sell</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"price\">Price</Label>\n                          <Input\n                            id=\"price\"\n                            type=\"number\"\n                            placeholder=\"67234.56\"\n                            value={signalForm.price || \"\"}\n                            onChange={(e) => setSignalForm({ ...signalForm, price: parseFloat(e.target.value) || 0 })}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"note\">Note (Optional)</Label>\n                          <Input\n                            id=\"note\"\n                            placeholder=\"Manual signal for testing\"\n                            value={signalForm.note}\n                            onChange={(e) => setSignalForm({ ...signalForm, note: e.target.value })}\n                          />\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button\n                          variant=\"destructive\"\n                          onClick={() => createSignalMutation.mutate(signalForm)}\n                          disabled={createSignalMutation.isPending}\n                        >\n                          {createSignalMutation.isPending ? \"Injecting...\" : \"Inject Signal\"}\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Use the button above to manually inject trading signals. This will broadcast to all connected users and trigger their configured alerts.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["Admin","toast","useToast","queryClient","useQueryClient","signalForm","setSignalForm","useState","newTicker","setNewTicker","isSignalDialogOpen","setIsSignalDialogOpen","isTickerDialogOpen","setIsTickerDialogOpen","authToken","users","isLoadingUsers","useQuery","response","tickers","isLoadingTickers","signals","isLoadingSignals","updateUserMutation","useMutation","userId","updates","createTickerMutation","ticker","updateTickerMutation","tickerId","createSignalMutation","signal","adminStats","Users","Activity","DollarSign","Server","jsxs","jsx","Sidebar","stat","index","IconComponent","Card","CardContent","CardHeader","CardTitle","_","Skeleton","Table","TableHeader","TableRow","TableHead","TableBody","user","TableCell","Badge","UISwitch","checked","Button","Dialog","DialogTrigger","Plus","DialogContent","DialogHeader","DialogTitle","DialogDescription","Label","Input","e","DialogFooter","CheckCircle","XCircle","Edit","Trash2","Send","Select","value","SelectTrigger","SelectValue","SelectContent","t","SelectItem"],"mappings":"kgCAqEA,SAAwBA,IAAQ,CACxB,KAAA,CAAE,MAAAC,CAAM,EAAIC,GAAS,EACrBC,EAAcC,GAAe,EAC7B,CAACC,EAAYC,CAAa,EAAIC,WAAqB,CACvD,OAAQ,GACR,WAAY,MACZ,MAAO,EACP,KAAM,EAAA,CACP,EACK,CAACC,EAAWC,CAAY,EAAIF,WAAS,CACzC,OAAQ,GACR,YAAa,GACb,UAAW,EAAA,CACZ,EACK,CAACG,EAAoBC,CAAqB,EAAIJ,EAAAA,SAAS,EAAK,EAC5D,CAACK,EAAoBC,CAAqB,EAAIN,EAAAA,SAAS,EAAK,EAE5DO,EAAY,aAAa,QAAQ,YAAY,EAG7C,CAAE,KAAMC,EAAO,UAAWC,CAAA,EAAmBC,EAAS,CAC1D,SAAU,CAAC,kBAAkB,EAC7B,QAAS,SAAY,CACb,MAAAC,EAAW,MAAM,MAAM,mBAAoB,CAC/C,QAAS,CAAE,cAAe,UAAUJ,CAAS,EAAG,CAAA,CACjD,EACD,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,uBAAuB,EAClD,OAAA,MAAMA,EAAS,KAAK,CAAA,CAC7B,CACD,EAEK,CAAE,KAAMC,EAAS,UAAWC,CAAA,EAAqBH,EAAS,CAC9D,SAAU,CAAC,oBAAoB,EAC/B,QAAS,SAAY,CACb,MAAAC,EAAW,MAAM,MAAM,qBAAsB,CACjD,QAAS,CAAE,cAAe,UAAUJ,CAAS,EAAG,CAAA,CACjD,EACD,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,yBAAyB,EACpD,OAAA,MAAMA,EAAS,KAAK,CAAA,CAC7B,CACD,EAEK,CAAE,KAAMG,EAAS,UAAWC,EAAA,EAAqBL,EAAS,CAC9D,SAAU,CAAC,cAAc,EACzB,QAAS,SAAY,CACb,MAAAC,EAAW,MAAM,MAAM,wBAAyB,CACpD,QAAS,CAAE,cAAe,UAAUJ,CAAS,EAAG,CAAA,CACjD,EACD,GAAI,CAACI,EAAS,GAAU,MAAA,IAAI,MAAM,yBAAyB,EACpD,OAAA,MAAMA,EAAS,KAAK,CAAA,CAC7B,CACD,EAGKK,EAAqBC,EAAY,CACrC,WAAY,MAAO,CAAE,OAAAC,EAAQ,QAAAC,KAA0D,CACrF,MAAMR,EAAW,MAAM,MAAM,oBAAoBO,CAAM,GAAI,CACzD,OAAQ,MACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAUX,CAAS,EACpC,EACA,KAAM,KAAK,UAAUY,CAAO,CAAA,CAC7B,EACD,GAAI,CAACR,EAAS,GAAU,MAAA,IAAI,MAAM,uBAAuB,EAClD,OAAA,MAAMA,EAAS,KAAK,CAC7B,EACA,UAAW,IAAM,CACff,EAAY,kBAAkB,CAAE,SAAU,CAAC,kBAAkB,EAAG,EAC1DF,EAAA,CAAE,MAAO,4BAA6B,CAC9C,EACA,QAAS,IAAM,CACbA,EAAM,CAAE,MAAO,wBAAyB,QAAS,cAAe,CAAA,CAClE,CACD,EAEK0B,EAAuBH,EAAY,CACvC,WAAY,MAAOI,GAA6B,CACxC,MAAAV,EAAW,MAAM,MAAM,qBAAsB,CACjD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAUJ,CAAS,EACpC,EACA,KAAM,KAAK,UAAUc,CAAM,CAAA,CAC5B,EACD,GAAI,CAACV,EAAS,GAAU,MAAA,IAAI,MAAM,yBAAyB,EACpD,OAAA,MAAMA,EAAS,KAAK,CAC7B,EACA,UAAW,IAAM,CACff,EAAY,kBAAkB,CAAE,SAAU,CAAC,oBAAoB,EAAG,EAClEM,EAAa,CAAE,OAAQ,GAAI,YAAa,GAAI,UAAW,GAAM,EAC7DI,EAAsB,EAAK,EACrBZ,EAAA,CAAE,MAAO,8BAA+B,CAChD,EACA,QAAS,IAAM,CACbA,EAAM,CAAE,MAAO,0BAA2B,QAAS,cAAe,CAAA,CACpE,CACD,EAEK4B,EAAuBL,EAAY,CACvC,WAAY,MAAO,CAAE,SAAAM,EAAU,QAAAJ,KAA8D,CAC3F,MAAMR,EAAW,MAAM,MAAM,sBAAsBY,CAAQ,GAAI,CAC7D,OAAQ,MACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAUhB,CAAS,EACpC,EACA,KAAM,KAAK,UAAUY,CAAO,CAAA,CAC7B,EACD,GAAI,CAACR,EAAS,GAAU,MAAA,IAAI,MAAM,yBAAyB,EACpD,OAAA,MAAMA,EAAS,KAAK,CAC7B,EACA,UAAW,IAAM,CACff,EAAY,kBAAkB,CAAE,SAAU,CAAC,oBAAoB,EAAG,EAC5DF,EAAA,CAAE,MAAO,8BAA+B,CAChD,EACA,QAAS,IAAM,CACbA,EAAM,CAAE,MAAO,0BAA2B,QAAS,cAAe,CAAA,CACpE,CACD,EAEK8B,EAAuBP,EAAY,CACvC,WAAY,MAAOQ,GAAuB,CAClC,MAAAd,EAAW,MAAM,MAAM,qBAAsB,CACjD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAUJ,CAAS,EACpC,EACA,KAAM,KAAK,UAAUkB,CAAM,CAAA,CAC5B,EACD,GAAI,CAACd,EAAS,GAAU,MAAA,IAAI,MAAM,yBAAyB,EACpD,OAAA,MAAMA,EAAS,KAAK,CAC7B,EACA,UAAW,IAAM,CACff,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAc,EAAG,EAC9CG,EAAA,CAAE,OAAQ,GAAI,WAAY,MAAO,MAAO,EAAG,KAAM,GAAI,EACnEK,EAAsB,EAAK,EACrBV,EAAA,CAAE,MAAO,+BAAgC,CACjD,EACA,QAAS,IAAM,CACbA,EAAM,CAAE,MAAO,0BAA2B,QAAS,cAAe,CAAA,CACpE,CACD,EAEKgC,GAAa,CACjB,CACE,MAAO,cACP,OAAOlB,GAAA,YAAAA,EAAO,OAAO,aAAc,IACnC,KAAMmB,GACN,MAAO,iBACT,EACA,CACE,MAAO,iBACP,OAAOb,GAAA,YAAAA,EAAS,OAAO,aAAc,IACrC,KAAMc,GACN,MAAO,kBACT,EACA,CACE,MAAO,UACP,MAAO,UACP,KAAMC,GACN,MAAO,kBACT,EACA,CACE,MAAO,gBACP,MAAO,SACP,KAAMC,GACN,MAAO,kBAAA,CAEX,EAEA,aACG,MAAI,CAAA,UAAU,6BACb,SAACC,EAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAAAC,EAAA,IAACC,GAAQ,EAAA,EAGTF,EAAAA,KAAC,MAAI,CAAA,UAAU,eAEb,SAAA,CAAAC,EAAAA,IAAC,UAAO,UAAU,qCAChB,SAACD,EAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,qBAAqB,SAAe,kBAAA,EAClDD,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,gCAAgC,SAAkB,qBAAA,EACjEA,EAAA,IAAA,MAAA,CAAI,UAAU,iHAAiH,SAEhI,GAAA,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EAGAD,EAAAA,KAAC,MAAI,CAAA,UAAU,gBAEb,SAAA,CAAAC,MAAC,OAAI,UAAU,wCACZ,YAAW,IAAI,CAACE,EAAMC,IAAU,CAC/B,MAAMC,EAAgBF,EAAK,KAEzB,OAAAF,EAAAA,IAACK,GACC,SAACL,EAAA,IAAAM,EAAA,CAAY,UAAU,MACrB,SAAAP,EAAAA,KAAC,MAAI,CAAA,UAAU,oCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAAAC,EAAA,IAAC,IAAE,CAAA,UAAU,gCAAiC,SAAAE,EAAK,MAAM,EACzDF,EAAAA,IAAC,KAAE,UAAW,sBAAsBE,EAAK,KAAK,GAAK,WAAK,KAAM,CAAA,CAAA,EAChE,QACCE,EAAc,CAAA,UAAW,WAAWF,EAAK,KAAK,EAAI,CAAA,CAAA,EACrD,CAAA,CACF,GATSC,CAUX,CAEH,CAAA,EACH,SAGCE,EACC,CAAA,SAAA,CAAAL,MAACO,EACC,CAAA,SAAAP,EAAA,IAACQ,EAAU,CAAA,SAAA,iBAAe,CAAA,EAC5B,EACAR,EAAAA,IAACM,EACE,CAAA,SAAA7B,EACEuB,EAAA,IAAA,MAAA,CAAI,UAAU,YACZ,SAAA,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACS,EAAG,IAC7BT,EAAA,IAACU,EAAiB,CAAA,UAAU,aAAb,EAAA,CAA2B,CAC3C,CAAA,CACH,EAEAX,EAAA,KAACY,EACC,CAAA,SAAA,CAACX,EAAA,IAAAY,EAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAAb,EAAAA,IAACc,GAAU,SAAI,MAAA,CAAA,EACfd,EAAAA,IAACc,GAAU,SAAI,MAAA,CAAA,EACfd,EAAAA,IAACc,GAAU,SAAM,QAAA,CAAA,EACjBd,EAAAA,IAACc,GAAU,SAAO,SAAA,CAAA,EAClBd,EAAAA,IAACc,GAAU,SAAO,SAAA,CAAA,CAAA,CAAA,CACpB,CACF,CAAA,QACCC,EACE,CAAA,SAAAvC,GAAA,YAAAA,EAAO,IAAKwC,UACVH,EACC,CAAA,SAAA,CAACb,EAAA,IAAAiB,EAAA,CACC,gBAAC,MACC,CAAA,SAAA,CAAClB,EAAAA,KAAA,MAAA,CAAI,UAAU,cACZ,SAAA,CAAKiB,EAAA,UAAU,IAAEA,EAAK,QAAA,EACzB,EACChB,EAAA,IAAA,MAAA,CAAI,UAAU,gCAAiC,WAAK,KAAM,CAAA,CAAA,CAAA,CAC7D,CACF,CAAA,EACCA,EAAA,IAAAiB,EAAA,CACC,SAACjB,EAAA,IAAAkB,GAAA,CAAM,QAASF,EAAK,OAAS,QAAU,UAAY,YACjD,SAAKA,EAAA,IACR,CAAA,EACF,EACChB,MAAAiB,EAAA,CACC,SAAClB,EAAAA,KAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAC,EAAA,IAACmB,EAAA,CACC,QAASH,EAAK,SACd,gBAAkBI,GAChBpC,EAAmB,OAAO,CACxB,OAAQgC,EAAK,GACb,QAAS,CAAE,SAAUI,CAAQ,CAC9B,CAAA,CAAA,CAEL,QACC,OAAK,CAAA,UAAU,UACb,SAAKJ,EAAA,SAAW,SAAW,UAC9B,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACAhB,MAACiB,GACE,SAAI,IAAA,KAAKD,EAAK,SAAS,EAAE,qBAC5B,QACCC,EACC,CAAA,SAAAjB,EAAA,IAACqB,EAAA,CACC,QAAQ,UACR,KAAK,KACL,QAAS,IACPrC,EAAmB,OAAO,CACxB,OAAQgC,EAAK,GACb,QAAS,CAAE,KAAMA,EAAK,OAAS,QAAU,OAAS,OAAQ,CAAA,CAC3D,EAGF,SAAAA,EAAK,OAAS,QAAU,eAAiB,YAAA,CAAA,CAE9C,CAAA,CAAA,GA9CaA,EAAK,EA+CpB,EAEJ,CAAA,CAAA,CAAA,CACF,CAEJ,CAAA,CAAA,EACF,SAGCX,EACC,CAAA,SAAA,CAAAL,MAACO,EACC,CAAA,SAAAR,EAAAA,KAAC,MAAI,CAAA,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAACQ,GAAU,SAAwB,0BAAA,CAAA,EAClCT,EAAA,KAAAuB,EAAA,CAAO,KAAMjD,EAAoB,aAAcC,EAC9C,SAAA,CAAA0B,MAACuB,EAAc,CAAA,QAAO,GACpB,SAAAxB,EAAA,KAACsB,EACC,CAAA,SAAA,CAACrB,EAAAA,IAAAwB,GAAA,CAAK,UAAU,cAAe,CAAA,EAAE,YAAA,CAAA,CAEnC,CACF,CAAA,SACCC,EACC,CAAA,SAAA,CAAA1B,OAAC2B,EACC,CAAA,SAAA,CAAA1B,EAAAA,IAAC2B,GAAY,SAAc,gBAAA,CAAA,EAC3B3B,EAAAA,IAAC4B,GAAkB,SAEnB,kDAAA,CAAA,CAAA,EACF,EACA7B,EAAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA6B,EAAA,CAAM,QAAQ,SAAS,SAAM,SAAA,EAC9B7B,EAAA,IAAC8B,EAAA,CACC,GAAG,SACH,YAAY,UACZ,MAAO7D,EAAU,OACjB,SAAW8D,GAAM7D,EAAa,CAAE,GAAGD,EAAW,OAAQ8D,EAAE,OAAO,KAAO,CAAA,CAAA,CAAA,CACxE,EACF,SACC,MACC,CAAA,SAAA,CAAC/B,EAAA,IAAA6B,EAAA,CAAM,QAAQ,cAAc,SAAW,cAAA,EACxC7B,EAAA,IAAC8B,EAAA,CACC,GAAG,cACH,YAAY,eACZ,MAAO7D,EAAU,YACjB,SAAW8D,GAAM7D,EAAa,CAAE,GAAGD,EAAW,YAAa8D,EAAE,OAAO,KAAO,CAAA,CAAA,CAAA,CAC7E,EACF,EACAhC,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACb,SAAA,CAAAC,EAAA,IAACmB,EAAA,CACC,QAASlD,EAAU,UACnB,gBAAkBmD,GAAqBlD,EAAa,CAAE,GAAGD,EAAW,UAAWmD,CAAS,CAAA,CAAA,CAC1F,EACApB,EAAAA,IAAC6B,GAAM,SAAO,SAAA,CAAA,CAAA,CAChB,CAAA,CAAA,EACF,QACCG,EACC,CAAA,SAAAhC,EAAA,IAACqB,EAAA,CACC,QAAS,IAAMjC,EAAqB,OAAOnB,CAAS,EACpD,SAAUmB,EAAqB,UAE9B,SAAAA,EAAqB,UAAY,cAAgB,eAAA,CAAA,CAEtD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACAY,EAAAA,IAACM,EACE,CAAA,SAAAzB,EACEmB,EAAA,IAAA,MAAA,CAAI,UAAU,YACZ,SAAA,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACS,EAAG,IAC7BT,EAAA,IAACU,EAAiB,CAAA,UAAU,aAAb,EAAA,CAA2B,CAC3C,CAAA,CACH,EAEAX,EAAA,KAACY,EACC,CAAA,SAAA,CAACX,EAAA,IAAAY,EAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAAb,EAAAA,IAACc,GAAU,SAAM,QAAA,CAAA,EACjBd,EAAAA,IAACc,GAAU,SAAW,aAAA,CAAA,EACtBd,EAAAA,IAACc,GAAU,SAAM,QAAA,CAAA,EACjBd,EAAAA,IAACc,GAAU,SAAO,SAAA,CAAA,CAAA,CAAA,CACpB,CACF,CAAA,QACCC,EACE,CAAA,SAAAnC,GAAA,YAAAA,EAAS,IAAKS,UACZwB,EACC,CAAA,SAAA,CAAAb,EAAA,IAACiB,EAAU,CAAA,UAAU,gBAAiB,SAAA5B,EAAO,OAAO,EACnDW,EAAA,IAAAiB,EAAA,CAAU,UAAU,wBAAyB,WAAO,YAAY,EAChEjB,MAAAiB,EAAA,CACC,SAAClB,EAAAA,KAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAC,EAAA,IAACmB,EAAA,CACC,QAAS9B,EAAO,UAChB,gBAAkB+B,GAChB9B,EAAqB,OAAO,CAC1B,SAAUD,EAAO,GACjB,QAAS,CAAE,UAAW+B,CAAQ,CAC/B,CAAA,CAAA,CAEL,EACC/B,EAAO,UACNW,MAACiC,GAAY,CAAA,UAAU,0BAA2B,CAAA,EAElDjC,EAAAA,IAACkC,GAAQ,CAAA,UAAU,sBAAuB,CAAA,CAAA,CAAA,CAE9C,CACF,CAAA,EACClC,MAAAiB,EAAA,CACC,SAAClB,EAAAA,KAAA,MAAA,CAAI,UAAU,iBACb,SAAA,CAACC,EAAAA,IAAAqB,EAAA,CAAO,QAAQ,QAAQ,KAAK,OAC3B,SAACrB,EAAAA,IAAAmC,GAAA,CAAK,UAAU,SAAA,CAAU,CAC5B,CAAA,EACCnC,EAAA,IAAAqB,EAAA,CAAO,QAAQ,QAAQ,KAAK,OAAO,UAAU,mBAC5C,SAACrB,EAAAA,IAAAoC,GAAA,CAAO,UAAU,SAAA,CAAU,CAC9B,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,GA9Ba/C,EAAO,EA+BtB,EAEJ,CAAA,CAAA,CAAA,CACF,CAEJ,CAAA,CAAA,EACF,SAGCgB,EACC,CAAA,SAAA,CAAAL,MAACO,EACC,CAAA,SAAAR,EAAAA,KAAC,MAAI,CAAA,UAAU,oCACb,SAAA,CAAAC,EAAAA,IAACQ,GAAU,SAAuB,yBAAA,CAAA,EACjCT,EAAA,KAAAuB,EAAA,CAAO,KAAMnD,EAAoB,aAAcC,EAC9C,SAAA,CAAA4B,EAAAA,IAACuB,GAAc,QAAO,GACpB,SAACxB,EAAA,KAAAsB,EAAA,CAAO,QAAQ,cACd,SAAA,CAACrB,EAAAA,IAAAqC,GAAA,CAAK,UAAU,cAAe,CAAA,EAAE,eAAA,CAAA,CAEnC,CACF,CAAA,SACCZ,EACC,CAAA,SAAA,CAAA1B,OAAC2B,EACC,CAAA,SAAA,CAAA1B,EAAAA,IAAC2B,GAAY,SAAoB,sBAAA,CAAA,EACjC3B,EAAAA,IAAC4B,GAAkB,SAEnB,iEAAA,CAAA,CAAA,EACF,EACA7B,EAAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA6B,EAAA,CAAM,QAAQ,SAAS,SAAM,SAAA,EAC9B9B,EAAA,KAACuC,EAAA,CACC,MAAOxE,EAAW,OAClB,cAAgByE,GAAUxE,EAAc,CAAE,GAAGD,EAAY,OAAQyE,EAAO,EAExE,SAAA,CAAAvC,MAACwC,EACC,CAAA,SAAAxC,EAAA,IAACyC,EAAY,CAAA,YAAY,eAAgB,CAAA,EAC3C,EACCzC,MAAA0C,EAAA,CACE,SAAS9D,GAAA,YAAAA,EAAA,UAAY+D,EAAE,WAAW,IAAKtD,GACtCU,EAAAA,KAAC6C,EAA2B,CAAA,MAAOvD,EAAO,OACvC,SAAA,CAAOA,EAAA,OAAO,MAAIA,EAAO,WAAA,GADXA,EAAO,EAExB,EAEJ,CAAA,CAAA,CAAA,CAAA,CACF,EACF,SACC,MACC,CAAA,SAAA,CAACW,EAAA,IAAA6B,EAAA,CAAM,QAAQ,aAAa,SAAW,cAAA,EACvC9B,EAAA,KAACuC,EAAA,CACC,MAAOxE,EAAW,WAClB,cAAgByE,GAA0BxE,EAAc,CAAE,GAAGD,EAAY,WAAYyE,EAAO,EAE5F,SAAA,CAACvC,EAAA,IAAAwC,EAAA,CACC,SAACxC,EAAA,IAAAyC,EAAA,CAAY,CAAA,EACf,SACCC,EACC,CAAA,SAAA,CAAC1C,EAAA,IAAA4C,EAAA,CAAW,MAAM,MAAM,SAAG,MAAA,EAC1B5C,EAAA,IAAA4C,EAAA,CAAW,MAAM,OAAO,SAAI,MAAA,CAAA,CAAA,CAC/B,CAAA,CAAA,CAAA,CAAA,CACF,EACF,SACC,MACC,CAAA,SAAA,CAAC5C,EAAA,IAAA6B,EAAA,CAAM,QAAQ,QAAQ,SAAK,QAAA,EAC5B7B,EAAA,IAAC8B,EAAA,CACC,GAAG,QACH,KAAK,SACL,YAAY,WACZ,MAAOhE,EAAW,OAAS,GAC3B,SAAWiE,GAAMhE,EAAc,CAAE,GAAGD,EAAY,MAAO,WAAWiE,EAAE,OAAO,KAAK,GAAK,CAAG,CAAA,CAAA,CAAA,CAC1F,EACF,SACC,MACC,CAAA,SAAA,CAAC/B,EAAA,IAAA6B,EAAA,CAAM,QAAQ,OAAO,SAAe,kBAAA,EACrC7B,EAAA,IAAC8B,EAAA,CACC,GAAG,OACH,YAAY,4BACZ,MAAOhE,EAAW,KAClB,SAAWiE,GAAMhE,EAAc,CAAE,GAAGD,EAAY,KAAMiE,EAAE,OAAO,KAAO,CAAA,CAAA,CAAA,CACxE,CACF,CAAA,CAAA,EACF,QACCC,EACC,CAAA,SAAAhC,EAAA,IAACqB,EAAA,CACC,QAAQ,cACR,QAAS,IAAM7B,EAAqB,OAAO1B,CAAU,EACrD,SAAU0B,EAAqB,UAE9B,SAAAA,EAAqB,UAAY,eAAiB,eAAA,CAAA,CAEvD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,QACCc,EACC,CAAA,SAAAN,MAAC,KAAE,UAAU,wBAAwB,mJAErC,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ"}