{"version":3,"file":"notification-setup-CQQUyjF_.js","sources":["../../src/pages/admin/notification-setup.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Mail, \n  MessageSquare, \n  Smartphone, \n  Bell, \n  Settings, \n  Save, \n  TestTube, \n  Send, \n  CheckCircle, \n  AlertTriangle,\n  Globe,\n  Key,\n  Server\n} from \"lucide-react\";\nimport { Sidebar } from \"@/components/layout/Sidebar\";\nimport Header from \"@/components/layout/Header\";\n\ninterface NotificationChannel {\n  id: string;\n  type: \"email\" | \"sms\" | \"telegram\" | \"discord\" | \"webhook\";\n  name: string;\n  isEnabled: boolean;\n  configuration: Record<string, any>;\n  lastTested?: string;\n  status: \"active\" | \"inactive\" | \"error\";\n}\n\ninterface NotificationTemplate {\n  id: string;\n  name: string;\n  type: \"signal_alert\" | \"price_alert\" | \"system_notification\";\n  subject?: string;\n  content: string;\n  isActive: boolean;\n  channels: string[];\n}\n\nexport default function AdminNotificationSetup() {\n  const [activeTab, setActiveTab] = useState(\"channels\");\n  const [selectedChannel, setSelectedChannel] = useState<NotificationChannel | null>(null);\n  const [selectedTemplate, setSelectedTemplate] = useState<NotificationTemplate | null>(null);\n  const [isChannelDialogOpen, setIsChannelDialogOpen] = useState(false);\n  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);\n  const [testMessage, setTestMessage] = useState(\"\");\n  const [channelForm, setChannelForm] = useState({\n    type: \"email\" as const,\n    name: \"\",\n    isEnabled: true,\n    configuration: {},\n  });\n  const [templateForm, setTemplateForm] = useState({\n    name: \"\",\n    type: \"signal_alert\" as const,\n    subject: \"\",\n    content: \"\",\n    isActive: true,\n    channels: [] as string[],\n  });\n  const { toast } = useToast();\n\n  const { data: channels = [], isLoading: channelsLoading } = useQuery<NotificationChannel[]>({\n    queryKey: [\"/api/admin/notification-channels\"],\n  });\n\n  const { data: templates = [], isLoading: templatesLoading } = useQuery<NotificationTemplate[]>({\n    queryKey: [\"/api/admin/notification-templates\"],\n  });\n\n  const createChannelMutation = useMutation({\n    mutationFn: async (channelData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/notification-channels\", channelData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-channels\"] });\n      setIsChannelDialogOpen(false);\n      resetChannelForm();\n      toast({\n        title: \"Channel Created\",\n        description: \"Notification channel has been created successfully.\",\n      });\n    },\n  });\n\n  const updateChannelMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/admin/notification-channels/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-channels\"] });\n      setIsChannelDialogOpen(false);\n      setSelectedChannel(null);\n      toast({\n        title: \"Channel Updated\",\n        description: \"Notification channel has been updated successfully.\",\n      });\n    },\n  });\n\n  const testChannelMutation = useMutation({\n    mutationFn: async ({ channelId, message }: { channelId: string; message: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/notification-channels/${channelId}/test`, { message });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Sent\",\n        description: \"Test notification has been sent successfully.\",\n      });\n    },\n  });\n\n  const resetChannelForm = () => {\n    setChannelForm({\n      type: \"email\",\n      name: \"\",\n      isEnabled: true,\n      configuration: {},\n    });\n  };\n\n  const resetTemplateForm = () => {\n    setTemplateForm({\n      name: \"\",\n      type: \"signal_alert\",\n      subject: \"\",\n      content: \"\",\n      isActive: true,\n      channels: [],\n    });\n  };\n\n  const handleCreateChannel = () => {\n    resetChannelForm();\n    setSelectedChannel(null);\n    setIsChannelDialogOpen(true);\n  };\n\n  const handleEditChannel = (channel: NotificationChannel) => {\n    setSelectedChannel(channel);\n    setChannelForm({\n      type: channel.type,\n      name: channel.name,\n      isEnabled: channel.isEnabled,\n      configuration: channel.configuration,\n    });\n    setIsChannelDialogOpen(true);\n  };\n\n  const handleSaveChannel = () => {\n    if (selectedChannel) {\n      updateChannelMutation.mutate({ id: selectedChannel.id, data: channelForm });\n    } else {\n      createChannelMutation.mutate(channelForm);\n    }\n  };\n\n  const handleTestChannel = (channelId: string) => {\n    testChannelMutation.mutate({ channelId, message: testMessage || \"Test notification from Proud Profits admin panel\" });\n  };\n\n  const getChannelIcon = (type: string) => {\n    switch (type) {\n      case \"email\":\n        return <Mail className=\"h-4 w-4 text-blue-500\" />;\n      case \"sms\":\n        return <Smartphone className=\"h-4 w-4 text-green-500\" />;\n      case \"telegram\":\n        return <MessageSquare className=\"h-4 w-4 text-blue-400\" />;\n      case \"discord\":\n        return <MessageSquare className=\"h-4 w-4 text-purple-500\" />;\n      case \"webhook\":\n        return <Globe className=\"h-4 w-4 text-orange-500\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"error\":\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <AlertTriangle className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const renderChannelConfiguration = () => {\n    switch (channelForm.type) {\n      case \"email\":\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"smtp-host\">SMTP Host</Label>\n                <Input\n                  id=\"smtp-host\"\n                  value={channelForm.configuration.host || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, host: e.target.value }\n                  }))}\n                  placeholder=\"smtp.gmail.com\"\n                  className=\"text-sm\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"smtp-port\">SMTP Port</Label>\n                <Input\n                  id=\"smtp-port\"\n                  type=\"number\"\n                  value={channelForm.configuration.port || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, port: e.target.value }\n                  }))}\n                  placeholder=\"587\"\n                  className=\"text-sm\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"smtp-user\">Username</Label>\n                <Input\n                  id=\"smtp-user\"\n                  value={channelForm.configuration.user || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, user: e.target.value }\n                  }))}\n                  placeholder=\"your-email@gmail.com\"\n                  className=\"text-sm\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"smtp-pass\">Password</Label>\n                <Input\n                  id=\"smtp-pass\"\n                  type=\"password\"\n                  value={channelForm.configuration.pass || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, pass: e.target.value }\n                  }))}\n                  placeholder=\"App Password\"\n                  className=\"text-sm\"\n                />\n              </div>\n            </div>\n          </div>\n        );\n      case \"sms\":\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"twilio-sid\">Twilio Account SID</Label>\n                <Input\n                  id=\"twilio-sid\"\n                  value={channelForm.configuration.accountSid || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, accountSid: e.target.value }\n                  }))}\n                  placeholder=\"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                  className=\"text-sm\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"twilio-token\">Auth Token</Label>\n                <Input\n                  id=\"twilio-token\"\n                  type=\"password\"\n                  value={channelForm.configuration.authToken || \"\"}\n                  onChange={(e) => setChannelForm(prev => ({\n                    ...prev,\n                    configuration: { ...prev.configuration, authToken: e.target.value }\n                  }))}\n                  placeholder=\"Your Auth Token\"\n                  className=\"text-sm\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"twilio-phone\">From Phone Number</Label>\n              <Input\n                id=\"twilio-phone\"\n                value={channelForm.configuration.fromPhone || \"\"}\n                onChange={(e) => setChannelForm(prev => ({\n                  ...prev,\n                  configuration: { ...prev.configuration, fromPhone: e.target.value }\n                }))}\n                placeholder=\"+1234567890\"\n                className=\"text-sm\"\n              />\n            </div>\n          </div>\n        );\n      case \"telegram\":\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"telegram-token\">Bot Token</Label>\n              <Input\n                id=\"telegram-token\"\n                type=\"password\"\n                value={channelForm.configuration.botToken || \"\"}\n                onChange={(e) => setChannelForm(prev => ({\n                  ...prev,\n                  configuration: { ...prev.configuration, botToken: e.target.value }\n                }))}\n                placeholder=\"123456789:ABCdefGHIjklMNOpqrSTUvwxYZ\"\n                className=\"text-sm\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"telegram-chat\">Default Chat ID</Label>\n              <Input\n                id=\"telegram-chat\"\n                value={channelForm.configuration.chatId || \"\"}\n                onChange={(e) => setChannelForm(prev => ({\n                  ...prev,\n                  configuration: { ...prev.configuration, chatId: e.target.value }\n                }))}\n                placeholder=\"-1001234567890\"\n                className=\"text-sm\"\n              />\n            </div>\n          </div>\n        );\n      case \"webhook\":\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"webhook-url\">Webhook URL</Label>\n              <Input\n                id=\"webhook-url\"\n                value={channelForm.configuration.url || \"\"}\n                onChange={(e) => setChannelForm(prev => ({\n                  ...prev,\n                  configuration: { ...prev.configuration, url: e.target.value }\n                }))}\n                placeholder=\"https://hooks.slack.com/services/...\"\n                className=\"text-sm\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"webhook-secret\">Secret (optional)</Label>\n              <Input\n                id=\"webhook-secret\"\n                type=\"password\"\n                value={channelForm.configuration.secret || \"\"}\n                onChange={(e) => setChannelForm(prev => ({\n                  ...prev,\n                  configuration: { ...prev.configuration, secret: e.target.value }\n                }))}\n                placeholder=\"Webhook secret\"\n                className=\"text-sm\"\n              />\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar className=\"hidden md:flex\" />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden ml-0 md:ml-64\">\n        <Header \n          title=\"Notification Setup\" \n          subtitle=\"Configure notification channels and message templates\" \n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8\">\n          <div className=\"space-y-6\">\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4\">\n          <TabsTrigger value=\"channels\" className=\"text-xs sm:text-sm\">Channels</TabsTrigger>\n          <TabsTrigger value=\"templates\" className=\"text-xs sm:text-sm\">Templates</TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"text-xs sm:text-sm\">Settings</TabsTrigger>\n          <TabsTrigger value=\"logs\" className=\"text-xs sm:text-sm\">Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"channels\" className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n            <h2 className=\"text-lg sm:text-xl font-semibold\">Notification Channels</h2>\n            <Button onClick={handleCreateChannel} className=\"w-full sm:w-auto\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Add Channel\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {channelsLoading ? (\n              Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              channels.map((channel) => (\n                <Card key={channel.id} className={!channel.isEnabled ? \"opacity-60\" : \"\"}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getChannelIcon(channel.type)}\n                        <div>\n                          <CardTitle className=\"text-base sm:text-lg\">{channel.name}</CardTitle>\n                          <CardDescription className=\"capitalize text-xs sm:text-sm\">{channel.type} channel</CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(channel.status)}\n                        <Badge variant={channel.isEnabled ? \"default\" : \"secondary\"} className=\"text-xs\">\n                          {channel.isEnabled ? \"Enabled\" : \"Disabled\"}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"text-xs text-muted-foreground\">\n                        Last tested: {channel.lastTested ? new Date(channel.lastTested).toLocaleDateString() : \"Never\"}\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditChannel(channel)}\n                          className=\"flex-1 text-xs\"\n                        >\n                          <Settings className=\"h-3 w-3 mr-1\" />\n                          Configure\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleTestChannel(channel.id)}\n                          disabled={testChannelMutation.isPending}\n                          className=\"flex-1 text-xs\"\n                        >\n                          <TestTube className=\"h-3 w-3 mr-1\" />\n                          Test\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n            <h2 className=\"text-lg sm:text-xl font-semibold\">Message Templates</h2>\n            <Button className=\"w-full sm:w-auto\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Add Template\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {templatesLoading ? (\n              Array.from({ length: 4 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-16 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              templates.map((template) => (\n                <Card key={template.id} className={!template.isActive ? \"opacity-60\" : \"\"}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-base sm:text-lg\">{template.name}</CardTitle>\n                        <CardDescription className=\"capitalize text-xs sm:text-sm\">{template.type.replace('_', ' ')}</CardDescription>\n                      </div>\n                      <Badge variant={template.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                        {template.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {template.subject && (\n                        <div>\n                          <p className=\"text-xs font-medium text-muted-foreground\">Subject:</p>\n                          <p className=\"text-xs sm:text-sm line-clamp-1\">{template.subject}</p>\n                        </div>\n                      )}\n                      <div>\n                        <p className=\"text-xs font-medium text-muted-foreground\">Content Preview:</p>\n                        <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-2\">{template.content}</p>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Channels: {template.channels.length}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Global Notification Settings</CardTitle>\n              <CardDescription className=\"text-xs sm:text-sm\">Configure system-wide notification preferences</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-sm font-medium\">Enable Notifications</Label>\n                      <p className=\"text-xs text-muted-foreground\">Master switch for all notifications</p>\n                    </div>\n                    <Switch />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-sm font-medium\">Rate Limiting</Label>\n                      <p className=\"text-xs text-muted-foreground\">Prevent notification spam</p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-sm font-medium\">Queue Processing</Label>\n                      <p className=\"text-xs text-muted-foreground\">Process notifications in background</p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"retry-attempts\" className=\"text-sm\">Retry Attempts</Label>\n                    <Input\n                      id=\"retry-attempts\"\n                      type=\"number\"\n                      defaultValue=\"3\"\n                      min=\"1\"\n                      max=\"10\"\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"batch-size\" className=\"text-sm\">Batch Size</Label>\n                    <Input\n                      id=\"batch-size\"\n                      type=\"number\"\n                      defaultValue=\"50\"\n                      min=\"1\"\n                      max=\"500\"\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"queue-interval\" className=\"text-sm\">Queue Interval (seconds)</Label>\n                    <Input\n                      id=\"queue-interval\"\n                      type=\"number\"\n                      defaultValue=\"30\"\n                      min=\"5\"\n                      max=\"300\"\n                      className=\"text-sm\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Notification Logs</CardTitle>\n              <CardDescription className=\"text-xs sm:text-sm\">Recent notification delivery history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Server className=\"h-8 w-8 mx-auto text-muted-foreground mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">Notification logs will appear here once the system is active.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Test Message Input */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"text-base sm:text-lg\">Test Message</CardTitle>\n          <CardDescription className=\"text-xs sm:text-sm\">Enter a custom message for testing notification channels</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n            <Input\n              value={testMessage}\n              onChange={(e) => setTestMessage(e.target.value)}\n              placeholder=\"Enter test message...\"\n              className=\"flex-1 text-sm\"\n            />\n            <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n              <Send className=\"h-4 w-4 mr-2\" />\n              Send Test\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Channel Configuration Dialog */}\n      <Dialog open={isChannelDialogOpen} onOpenChange={setIsChannelDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedChannel ? \"Configure Channel\" : \"Add Notification Channel\"}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedChannel ? \"Update notification channel settings\" : \"Set up a new notification channel\"}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"channel-name\">Channel Name</Label>\n                <Input\n                  id=\"channel-name\"\n                  value={channelForm.name}\n                  onChange={(e) => setChannelForm(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"My Email Channel\"\n                  className=\"text-sm\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"channel-type\">Channel Type</Label>\n                <select\n                  id=\"channel-type\"\n                  value={channelForm.type}\n                  onChange={(e) => setChannelForm(prev => ({ ...prev, type: e.target.value as any }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                >\n                  <option value=\"email\">Email</option>\n                  <option value=\"sms\">SMS</option>\n                  <option value=\"telegram\">Telegram</option>\n                  <option value=\"discord\">Discord</option>\n                  <option value=\"webhook\">Webhook</option>\n                </select>\n              </div>\n            </div>\n            \n            {renderChannelConfiguration()}\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                checked={channelForm.isEnabled}\n                onCheckedChange={(checked) => setChannelForm(prev => ({ ...prev, isEnabled: checked }))}\n              />\n              <Label className=\"text-sm\">Enable this channel</Label>\n            </div>\n          </div>\n          <DialogFooter className=\"flex flex-col sm:flex-row gap-2\">\n            <Button variant=\"outline\" onClick={() => setIsChannelDialogOpen(false)} className=\"w-full sm:w-auto\">\n              Cancel\n            </Button>\n            <Button onClick={handleSaveChannel} disabled={createChannelMutation.isPending || updateChannelMutation.isPending} className=\"w-full sm:w-auto\">\n              <Save className=\"h-4 w-4 mr-2\" />\n              {createChannelMutation.isPending || updateChannelMutation.isPending ? \"Saving...\" : \"Save Channel\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}"],"names":["AdminNotificationSetup","activeTab","setActiveTab","useState","selectedChannel","setSelectedChannel","isChannelDialogOpen","setIsChannelDialogOpen","testMessage","setTestMessage","channelForm","setChannelForm","toast","useToast","channels","channelsLoading","useQuery","templates","templatesLoading","createChannelMutation","useMutation","channelData","apiRequest","queryClient","resetChannelForm","updateChannelMutation","id","data","testChannelMutation","channelId","message","handleCreateChannel","handleEditChannel","channel","handleSaveChannel","handleTestChannel","getChannelIcon","type","jsx","Mail","Smartphone","MessageSquare","Globe","Bell","getStatusIcon","status","CheckCircle","AlertTriangle","renderChannelConfiguration","jsxs","Label","Input","e","prev","Sidebar","Header","Tabs","TabsList","TabsTrigger","TabsContent","Button","Settings","_","i","Card","CardHeader","CardContent","CardTitle","CardDescription","Badge","TestTube","template","Switch","Server","Send","Dialog","DialogContent","DialogHeader","DialogTitle","DialogDescription","checked","DialogFooter","Save"],"mappings":"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"}